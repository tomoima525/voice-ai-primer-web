{
  "f6aa50b7334b8f9d": "音声AI&amp; 音声エージェント",
  "b9d78a82b1d2f512": "図解入門",
  "a9360e0212a4d173": "目次",
  "b85be3143b6068b5": "<a href=\"#conversational-voice-ai\">2025年の会話型音声AI</a>",
  "40df4ddabbe81e39": "<a href=\"#about-this-guide\">このガイドについて</a>",
  "38af9d645eb1692c": "<a href=\"#basic-loop\">会話型AIの基本的なフロー</a>",
  "b9f4c4e99ed49936": "<a href=\"#core-tech\">コア技術とベストプラクティス</a>\n          <ul>\n            <li><a href=\"#latency\">4.1. レイテンシ</a></li>\n            <li>\n              <a href=\"#llms-for-voice\">4.2. 音声ユースケース向けのLLM</a>\n              <ul>\n                <li><a href=\"#latency-llm\">4.2.1. レイテンシ</a></li>\n                <li><a href=\"#cost-comparison\">4.2.2. コスト比較</a></li>\n                <li><a href=\"#open-source\">4.2.3. オープンソース / オープンウェイト</a></li>\n                <li><a href=\"#speech-to-speech\">4.2.4. speech-to-speech(音声→音声)モデルはどうなの？</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#speech-to-text\">4.3. Speech-to-text</a>\n              <ul>\n                <li><a href=\"#deepgram-and-gladia\">4.3.1. Deepgram と Gladia</a></li>\n                <li><a href=\"#prompting-help\">4.3.2. プロンプトはLLMを助ける</a></li>\n                <li><a href=\"#other-stt-options\">4.3.3. その他のSTTの選択肢</a></li>\n                <li><a href=\"#gemini-transcribing\">4.3.4. Google Geminiでの文字起こし</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#text-to-speech\">4.4. Text-to-speech</a>\n            </li>\n            <li>\n              <a href=\"#audio-processing\">4.5. オーディオ処理</a>\n              <ul>\n                <li><a href=\"#avoiding-spurious-interruptions\">4.5.1. マイクとゲインの自動制御</a></li>\n                <li><a href=\"#echo-cancellation\">4.5.2. エコーキャンセレーション</a></li>\n                <li><a href=\"#noise-suppression\">4.5.3. ノイズ抑制、音声、音楽</a></li>\n                <li><a href=\"#encoding\">4.5.4. エンコーディング</a></li>\n                <li><a href=\"#server-side-noise\">4.5.5. サーバーサイドノイズ処理と話者分離</a></li>\n                <li><a href=\"#voice-activity-detection\">4.5.6. 音声活動検出（VAD）</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#network-transport\">4.6. ネットワーク伝送</a>\n              <ul>\n                <li><a href=\"#websockets-webrtc\">4.6.1. WebSockets と WebRTC</a></li>\n                <li><a href=\"#http\">4.6.2. HTTP</a></li>\n                <li><a href=\"#quic-moq\">4.6.3. QUIC と MoQ</a></li>\n                <li><a href=\"#network-routing\">4.6.4. ネットワークルーティング</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#turn-detection\">4.7. 発話ターン検出</a>\n              <ul>\n                <li><a href=\"#voice-activity-detection-4-7\">4.7.1. 音声活動検出</a></li>\n                <li><a href=\"#push-to-talk\">4.7.2. プッシュトゥトーク</a></li>\n                <li><a href=\"#endpoint-markers\">4.7.3. エンドポイントマーカー</a></li>\n                <li><a href=\"#context-aware-turn-detection\">4.7.4. コンテキストを理解したターン検出</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#interruption-handling\">4.8. 割り込み処理</a>\n              <ul>\n                <li><a href=\"#avoiding-spurious-interruptions\">4.8.1. 誤検知による不要な割り込みの回避</a></li>\n                <li><a href=\"#maintaining-accurate-context\">4.8.2. 割り込み後の正確なコンテキストの維持</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#managing-conversation-context\">4.9. 会話コンテキストの管理</a>\n              <ul>\n                <li><a href=\"#differences-between-llm-apis\">4.9.1. LLM APIによる違い</a></li>\n                <li><a href=\"#modifying-context-between-turns\">4.9.2. ターン間でのコンテキストの変更</a></li>\n              </ul>\n            </li>\n            <li>\n              <a href=\"#function-calling\">4.10. Function Calling</a>\n              <ul>\n                <li><a href=\"#function-calling-reliability\">4.10.1. 音声AIにおける Function Callingの信頼性</a></li>\n                <li><a href=\"#latency-function-calls\">4.10.2. Function Callingのレイテンシ</a></li>\n                <li><a href=\"#handling-interruptions\">4.10.3. 割り込みの扱い</a></li>\n                <li><a href=\"#streaming-mode\">4.10.4. ストリーミングモードとFunction Callingのチャンク</a></li>\n                <li><a href=\"#execute-function-calls\">4.10.5. Function Callingをどのように、どこで実行するか</a></li>\n                <li><a href=\"#async-function-calls\">4.10.6. 非同期Function Calling</a></li>\n                <li><a href=\"#parallel-composite-function-calling\">4.10.7. 並列および複合的なFunction Calling</a></li>\n              </ul>\n            </li>\n            <li><a href=\"#multimodality\">4.11. マルチモーダリティ</a></li>\n          </ul>",
  "63ccf50ffc0f7c20": "<a href=\"#latency\">4.1. レイテンシ</a>",
  "5d7b630885e5c389": "<a href=\"#llms-for-voice\">4.2. 音声ユースケース向けのLLM</a>\n              <ul>\n                <li><a href=\"#latency-llm\">4.2.1. レイテンシ</a></li>\n                <li><a href=\"#cost-comparison\">4.2.2. コスト比較</a></li>\n                <li><a href=\"#open-source\">4.2.3. オープンソース / オープンウェイト</a></li>\n                <li><a href=\"#speech-to-speech\">4.2.4. speech-to-speechへのモデルはどうか？</a></li>\n              </ul>",
  "a7ec6be8df232bea": "<a href=\"#latency-llm\">4.2.1. レイテンシ</a>",
  "6f5134562bc74d5d": "<a href=\"#cost-comparison\">4.2.2. コスト比較</a>",
  "03d98f689a05c48d": "<a href=\"#open-source\">4.2.3. オープンソース / オープンウェイト</a>",
  "115ad492c6e341f1": "<a href=\"#speech-to-speech\">4.2.4. speech-to-speech(音声→音声)モデルはどうなの？</a>",
  "8bb221cce8b8eb6c": "<a href=\"#speech-to-text\">4.3. Speech-to-text</a>\n              <ul>\n                <li><a href=\"#deepgram-and-gladia\">4.3.1. Deepgram と Gladia</a></li>\n                <li><a href=\"#prompting-help\">4.3.2. プロンプトはLLMを助ける</a></li>\n                <li><a href=\"#other-stt-options\">4.3.3. その他の</a></li>\n                <li><a href=\"#gemini-transcribing\">4.3.4. Google Geminiでの文字起こし</a></li>\n              </ul>",
  "41d8fe2d7e574f31": "<a href=\"#deepgram-and-gladia\">4.3.1. Deepgram と Gladia</a>",
  "fd0a7d659346ed3a": "<a href=\"#prompting-help\">4.3.2. プロンプトはLLMを助ける</a>",
  "f6744bb2e3a8c1e1": "<a href=\"#other-stt-options\">4.3.3. その他のSTTの</a>",
  "cc2ecf94669b3c6d": "<a href=\"#gemini-transcribing\">4.3.4. Google Geminiでの文字起こし</a>",
  "1d5b2522f9f7eb61": "<a href=\"#text-to-speech\">4.4. Text-to-speech</a>",
  "d178869edebb0977": "<a href=\"#audio-processing\">4.5. オーディオ処理</a>\n              <ul>\n                <li><a href=\"#avoiding-spurious-interruptions\">4.5.1. マイクとゲインの制御</a></li>\n                <li><a href=\"#echo-cancellation\">4.5.2. エコーキャンセレーション</a></li>\n                <li><a href=\"#noise-suppression\">4.5.3. ノイズ抑制、音声、音楽</a></li>\n                <li><a href=\"#encoding\">4.5.4. エンコーディング</a></li>\n                <li><a href=\"#server-side-noise\">4.5.5. サーバーサイドノイズ処理と話者分離</a></li>\n                <li><a href=\"#voice-activity-detection\">4.5.6. 音声活動検出（VAD）</a></li>\n              </ul>",
  "40c69fd991e92c63": "<a href=\"#avoiding-spurious-interruptions\">4.5.1. マイクとゲインの自動制御</a>",
  "094cd03f56c3025d": "<a href=\"#echo-cancellation\">4.5.2. エコーキャンセレーション</a>",
  "f5fa977b44d31f14": "<a href=\"#noise-suppression\">4.5.3. ノイズ抑制、音声、音楽</a>",
  "0f82f4fdb020e40b": "<a href=\"#encoding\">4.5.4. エンコーディング</a>",
  "e9660aec29891e7a": "<a href=\"#server-side-noise\">4.5.5. サーバーサイドノイズ処理と話者分離</a>",
  "58b38b255dd1fa7f": "<a href=\"#voice-activity-detection\">4.5.6. 音声活動検出（VAD）</a>",
  "2f0677d6ff1213d7": "<a href=\"#network-transport\">4.6. ネットワーク伝送</a>\n              <ul>\n                <li><a href=\"#websockets-webrtc\">4.6.1. WebSockets と WebRTC</a></li>\n                <li><a href=\"#http\">4.6.2. HTTP</a></li>\n                <li><a href=\"#quic-moq\">4.6.3. QUIC と MoQ</a></li>\n                <li><a href=\"#network-routing\">4.6.4. ネットワークルーティング</a></li>\n              </ul>",
  "65b16cdc20f7deba": "<a href=\"#websockets-webrtc\">4.6.1. WebSockets と WebRTC</a>",
  "747cf1e1ad576418": "<a href=\"#http\">4.6.2. HTTP</a>",
  "9b4c090292872552": "<a href=\"#quic-moq\">4.6.3. QUIC と MoQ</a>",
  "b294df609f5db261": "<a href=\"#network-routing\">4.6.4. ネットワークルーティング</a>",
  "96908b360e966863": "<a href=\"#turn-detection\">4.7. 発話ターン検出</a>\n              <ul>\n                <li><a href=\"#voice-activity-detection-4-7\">4.7.1. 音声活動検出</a></li>\n                <li><a href=\"#push-to-talk\">4.7.2. プッシュトゥトーク</a></li>\n                <li><a href=\"#endpoint-markers\">4.7.3. エンドポイントマーカー</a></li>\n                <li><a href=\"#context-aware-turn-detection\">4.7.4. コンテキストを理解したターン検出</a></li>\n              </ul>",
  "ae3820f50d65798b": "<a href=\"#voice-activity-detection-4-7\">4.7.1. 音声活動検出</a>",
  "3b779f91adca3d10": "<a href=\"#push-to-talk\">4.7.2. プッシュトゥトーク</a>",
  "949448dcc378c1c6": "<a href=\"#endpoint-markers\">4.7.3. エンドポイントマーカー</a>",
  "c04ecc7523b5b0ba": "<a href=\"#context-aware-turn-detection\">4.7.4. コンテキストを理解したターン検出</a>",
  "9badf14c637a24da": "<a href=\"#interruption-handling\">4.8. 割り込み処理</a>\n              <ul>\n                <li><a href=\"#avoiding-spurious-interruptions\">4.8.1. 誤検知による不要な割り込みの回避</a></li>\n                <li><a href=\"#maintaining-accurate-context\">4.8.2. 割り込み後の正確なコンテキストの維持</a></li>\n              </ul>",
  "5f672783b009943b": "<a href=\"#avoiding-spurious-interruptions\">4.8.1. 誤検知による不要な割り込みの回避</a>",
  "93a74d618ce3a05a": "<a href=\"#maintaining-accurate-context\">4.8.2. 割り込み後の正確なコンテキストの維持</a>",
  "cc2b667a78d7a96b": "<a href=\"#managing-conversation-context\">4.9. 会話コンテキストの管理</a>\n              <ul>\n                <li><a href=\"#differences-between-llm-apis\">4.9.1. LLM APIによる違い</a></li>\n                <li><a href=\"#modifying-context-between-turns\">4.9.2. ターン間でのコンテキストの変更</a></li>\n              </ul>",
  "adde8e56dd43ffbd": "<a href=\"#differences-between-llm-apis\">4.9.1. LLM APIによる違い</a>",
  "852220b5d74a37e8": "<a href=\"#modifying-context-between-turns\">4.9.2. ターン間でのコンテキストの変更</a>",
  "f58a1463dfc4377f": "<a href=\"#function-calling\">4.10. Function Calling</a>\n              <ul>\n                <li><a href=\"#function-calling-reliability\">4.10.1. 音声AIにおける Function Callingの信頼性</a></li>\n                <li><a href=\"#latency-function-calls\">4.10.2. Function Callingのレイテンシ</a></li>\n                <li><a href=\"#handling-interruptions\">4.10.3. 割り込みの扱い</a></li>\n                <li><a href=\"#streaming-mode\">4.10.4. ストリーミングモードとFunction Callingのチャンク</a></li>\n                <li><a href=\"#execute-function-calls\">4.10.5. Function Callingをどのように、どこで実行するか</a></li>\n                <li><a href=\"#async-function-calls\">4.10.6. 非同期Function Calling</a></li>\n                <li><a href=\"#parallel-composite-function-calling\">4.10.7. 並列および複合的なFunction Calling</a></li>\n              </ul>",
  "d5b2ceb8a78b0820": "<a href=\"#function-calling-reliability\">4.10.1. 音声AIにおける Function Callingの信頼性</a>",
  "0812423723019fa5": "<a href=\"#latency-function-calls\">4.10.2. Function Callingのレイテンシ</a>",
  "a27ea43473596ce3": "<a href=\"#handling-interruptions\">4.10.3. 割り込みの扱い</a>",
  "0d0bd80286c1570b": "<a href=\"#streaming-mode\">4.10.4. ストリーミングモードとFunction Callingのチャンク</a>",
  "942483574cc82932": "<a href=\"#execute-function-calls\">4.10.5. Function Callingをどのように、どこで実行するか</a>",
  "84b4b5bb91156227": "<a href=\"#async-function-calls\">4.10.6. 非同期Function Calling</a>",
  "e011ec1633324abb": "<a href=\"#parallel-composite-function-calling\">4.10.7. 並列および複合的なFunction Calling</a>",
  "7cba208761635beb": "<a href=\"#multimodality\">4.11. マルチモーダリティ</a>",
  "fe28a5f46c736c98": "<a href=\"#multiple-models\">複数のAIモデルの利用</a>\n          <ul>\n            <li><a href=\"#fine-tuned-models\">5.1. 複数のファインチューニング済みモデルを利用する</a></li>\n            <li><a href=\"#async-inference-tasks\">5.2. 非同期推論タスクの実行</a></li>\n            <li><a href=\"#content-guardrails\">5.3. コンテンツガードレール</a></li>\n            <li><a href=\"#single-inference-actions\">5.4. 単一推論アクションの実行</a></li>\n            <li><a href=\"#self-improving-systems\">5.5. 自己改善システムに向けて</a></li>\n          </ul>",
  "9582741aa5641c82": "<a href=\"#fine-tuned-models\">5.1. 複数のファインチューニング済みモデルを利用する</a>",
  "f0852cc8e93a2099": "<a href=\"#async-inference-tasks\">5.2. 非同期推論タスクの実行</a>",
  "eaf29e44aa732f78": "<a href=\"#content-guardrails\">5.3. コンテンツガードレール</a>",
  "90a4900abfa8e1e1": "<a href=\"#single-inference-actions\">5.4. 単一推論アクションの実行</a>",
  "24e1ddb52d13767b": "<a href=\"#self-improving-systems\">5.5. 自己改善システムに向けて</a>",
  "bcd006d4a04eb93e": "<a href=\"#scripting\">スクリプティングと指示の追従</a>",
  "90e4bd8eeeeacf7c": "<a href=\"#evals\">音声AIの評価（Evals）</a>\n          <ul>\n            <li><a href=\"#evals-different\">7.1. 音声AIの評価はソフトウェアの単体テストとは異なる</a></li>\n            <li><a href=\"#failure-modes\">7.2. フェイルモード</a></li>\n            <li><a href=\"#eval-strategy\">7.3. 評価戦略の策定</a></li>\n          </ul>",
  "1616ce4c73b313c3": "<a href=\"#evals-different\">7.1. 音声AIの評価はソフトウェアの単体テストとは異なる</a>",
  "9349aef9f773f233": "<a href=\"#failure-modes\">7.2. フェイルモード</a>",
  "102e60c91bf88072": "<a href=\"#eval-strategy\">7.3. 評価戦略の策定</a>",
  "3eda05ba32d861f5": "<a href=\"#telephony\">電話基盤との統合</a>",
  "0c4d5671e1735ebc": "<a href=\"#rag-memory\">RAG（Retrieval-Augmented Generation）とメモリ</a>",
  "bacbfac8e6a0478c": "<a href=\"#hosting\">ホスティングとスケーリング</a>\n          <ul>\n            <li><a href=\"#hosting-architecture\">10.1. アーキテクチャ </a></li>\n            <li><a href=\"#hosting-cost\">10.2. 分単位コストの計算</a></li>\n          </ul>",
  "3fc4c7ee8fe42d57": "<a href=\"#hosting-architecture\">10.1. アーキテクチャ </a>",
  "9e0736938b575112": "<a href=\"#hosting-cost\">10.2. 分単位コストの計算</a>",
  "913f03d706ed64dd": "<a href=\"#future\">2025年に向けての展望</a>",
  "5ebf2365d1e8f764": "<a href=\"#contributors\">寄稿者</a>",
  "60a13387c15fb94e": "1. 2025年の会話型音声AI",
  "2ae0622c15031e8a": "LLMは会話が得意です。",
  "e0238a5eb2ff65a4": "ChatGPTやClaudeと自由形式の対話を多く行ったことがあるなら、LLMと話すことが非常に自然に感じられ、広範に有用であるという直感を持っているはずです。",
  "1e50b47e86818c26": "LLMは非構造化情報を構造化データに変換することも得意です。<sup>[1]</sup>",
  "6c50db82ba130df1": "新しい音声AIエージェントは、これら二つのLLMの能力—会話と非構造化データからの構造抽出—を活用し、新しい種類のユーザー体験を作り出しています。",
  "9bb94c1e269c3478": "[1] ここでは広義に意味しており、一部のLLMの「構造化出力」機能の狭義の意味に限定するものではありません。",
  "a6eec65d47e678bd": "音声AIは今日、さまざまなビジネス文脈で展開されています。例えば：",
  "3935ab10b5f9cd0d": "医療予約前の患者データ収集、",
  "8291467f83d0053f": "インバウンドの営業リードへのフォローアップ、",
  "424dcfc3c9ee05df": "さまざまなコールセンター業務の処理、",
  "70d296d246f9448c": "企業間のスケジュールや物流の調整、そして",
  "d1be6bdbd8d63df7": "ほぼあらゆる種類の小規模事業の電話対応。",
  "abd6f00bfc516c07": "消費者向けでも、会話型の音声（およびビデオ）AIはソーシャルアプリケーションやゲームにも浸透し始めています。開発者はGitHubやソーシャルメディアで毎日のように個人的な音声AIプロジェクトや実験を共有しています。",
  "72c612a2957d2f37": "2. 本ガイドについて",
  "bda226aa5a20a672": "本ガイドは音声AIの最先端におけるスナップショットです。<sup>[2]</sup>",
  "a7170a05a4a1c803": "本番稼働に耐えうる音声エージェントを構築するのは難しいです。多くの要素はゼロから実装するのが容易ではありません。音声AIアプリを構築する場合、このガイドで扱う多くの事項についてフレームワークに依存することが多いでしょう。しかし、すべてをゼロから構築するかどうかに関わらず、部品がどのように組み合わさるかを理解することは有益だと考えています。",
  "e9bd8939d5b851fd": "このガイドはSean DuBoisのオープンソース書籍<a href=\"https://webrtcforthecurious.com\" target=\"_blank\">WebRTC For the Curious</a>に直接触発されました。その書籍は最初に公開されてから4年間、数多くの開発者がWebRTCを理解するのに役立ってきました。<sup>[3]</sup>",
  "4c48e949efe31c0b": "この文書における音声AIコード例は<a href=\"https://pipecat.ai\" target=\"_blank\">Pipecat</a>オープンソースフレームワークを使用しています。Pipecatはリアルタイム音声AIのためのベンダーに依存しないエージェント層です。<sup>[4]</sup>本書でPipecatを使用した理由は次のとおりです：",
  "265dfcb59694cd77": "我々が日々これで構築し、メンテナンスをしていて、よく知っているからです！",
  "a4b84defe324f161": "Pipecatは現在最も広く使われている音声AIフレームワークであり、NVIDIA、Google、AWS、OpenAI、および数百のスタートアップがPipecatを活用し、また貢献しています。",
  "0d67d6696919dda9": "この文書では一般的なアドバイスを提供するように努めており、商用製品やサービスを推奨することは避けています。特定のベンダーを挙げる場合は、多くの音声AI開発者がそれらを使用しているためです。",
  "16ef8fb9d1b667a5": "それでは始めましょう …",
  "fb0688884ca4ab79": "[2] 本ガイドは元々2025年2月のAI Engineering Summit向けに執筆しました。2025年5月中旬に更新しています。",
  "e39cd49bb8ea1dbc": "[3] <a href=\"https://webrtcforthecurious.com\" target=\"_blank\">webrtcforthecurious.com</a> — WebRTCは音声AIに関連があり、後述の<a href=\"#websockets-webrtc\">WebSockets と WebRTC</a>の節で議論します。",
  "9dc26be5dcecdc0f": "[4] Pipecatは60以上の<a href=\"https://docs.pipecat.ai/server/services/supported-services\" target=\"_blank\">AIモデルとサービス</a>の統合を持ち、ターン検出や割り込み処理などの最先端実装を備えています。Pipecatを使えば、WebSockets、WebRTC、HTTP、および電話を使ってユーザーと通信するコードを書けます。PipecatにはTwilio、Telnyx、LiveKit、Dailyなどを含むさまざまなインフラプラットフォーム向けのトランスポート実装があります。JavaScript、React、iOS、Android、およびC++向けの<a href=\"https://docs.pipecat.ai/client/introduction\" target=\"_blank\">クライアント側Pipecat SDK</a>も用意されています。",
  "9eba39350937ef58": "3. 会話型AIの基本的なフロー",
  "362063cf85832a4e": "音声AIエージェントの基本的な「やるべき仕事」は、人間の発話を聞き、有用な方法で応答し、その順序を繰り返すことです。",
  "a0ec195fba9e4aac": "こんにちの本番環境の音声エージェントはほぼすべて非常に似たアーキテクチャを持っています。音声エージェントプログラムはクラウドで動作し、音声から音声へのループをオーケストレーションします。エージェントプログラムは複数のAIモデルを使用し、その一部はエージェントにローカルに実行され、他はAPI経由でアクセスされます。エージェントプログラムはまた、LLMのFunction Callingや構造化された出力を使用し、バックエンドシステムと連携します。",
  "047941e8eae8f632": "音声はユーザーのデバイスのマイクでキャプチャされ、エンコードされ、ネットワークを通じてクラウドで動作する音声エージェントプログラムに送信されます。",
  "85427ed16d2fb8af": "入力音声は文字起こしされ、LLMへのテキスト入力が作られます。",
  "83deb15143c58776": "テキストはコンテキスト—プロンプト—として組み立てられ、LLMによって推論が行われます。推論の出力は多くの場合、エージェントプログラムのロジックによってフィルタリングまたは変換されます。<sup>[5]</sup>",
  "02c5d44482ec2f01": "出力テキストは音声合成モデルに送られ、オーディオ出力が生成されます。",
  "1df74b370d044f70": "生成された音声出力がユーザーに返送されます。",
  "0d20980995698854": "音声エージェントプログラムがクラウドで実行され、音声合成(TTS:text-to-speech)、LLM、および音声認識（STT:speech-to-text）処理がクラウド上で行われていることが分かるでしょう。長期的には、より多くのAIワークロードがデバイス上で実行されるようになると予想されます。しかし今現在、<strong>本番環境の音声AIはクラウドが中心です</strong>。その理由は2つあります：",
  "017e5d435f37a11d": "音声AIエージェントは、低遅延で確実に複雑なワークフローを実行するために、利用可能な最良のAIモデルを使用する必要があります。エンドユーザーデバイスはまだ、最高のSTT、LLM、TTSモデルを許容できる遅延で実行するのに十分な処理能力をもったCPUを持っていません。",
  "2841879f8e8c0f30": "今ある商用音声AIエージェントの大半は、電話を介してユーザーとやり取りしています。電話の場合、エンドユーザーデバイスは存在しません — 少なくとも、あなたがコードを実行できるようなデバイスはありません！",
  "bf34005ee108b3cc": "このエージェントオーケストレーションの世界に深く入り込み<sup>[6]</sup>、次のような質問に答えていきましょう：",
  "1d87625f2356eec3": "音声AIエージェントにはどのLLMが最適か？",
  "670be645c4de1a84": "長時間のセッション中に会話コンテキストをどのように管理するか？",
  "bf65fad3f03e8198": "音声AIエージェントを既存のバックエンドシステムにどのように接続するか？<sup>[7]</sup>",
  "e79929352d928f2a": "音声AIエージェントが適切に機能しているかどうかをどう判断するか？",
  "9ff7f486e63c4b20": "こんにちのほぼすべての本番環境でのアーキテクチャ",
  "f2387911bd708351": "[5] 例えば、一般的なLLMエラーや安全性の問題を検出するため。",
  "1355556eab124f7d": "[6] 詳細に説明しましょう — 編注。",
  "a324babd6a6bd13c": "[7] 例えば、CRM、独自のナレッジベース、コールセンターシステムなど。",
  "5c0312d37f21b70c": "4. コア技術とベストプラクティス",
  "02c8bce7528ec495": "4.1. レイテンシ（遅延）",
  "11d623a3503a2174": "音声AIエージェントの構築は、ほとんどの点で他の種類のAIエンジニアリングと類似しています。テキストベースのマルチターンAIエージェントの構築経験があれば、そのドメインで得た多くの経験がボイスにも役立ちます。",
  "c2707cdf92544beb": "<strong>大きな違いはレイテンシです。</strong>",
  "d9b3098a722d0c02": "人間は通常の会話で速い応答を期待します。典型的な応答時間は500msです。長い沈黙は不自然に感じられます。",
  "f824da42ec72380c": "音声AIエージェントを構築するなら、エンドユーザーの視点からレイテンシを正確に測定する方法を学ぶ価値があります。",
  "b0b9ad40c3138038": "多くの場合、AIプラットフォームは実際の「音声対音声」の測定ではないレイテンシを提示しています。悪意があってしているわけではありません。プロバイダ側から見ると、レイテンシを測る簡単な方法は推論時間を測ることです。そのためプロバイダはレイテンシをそう考えがちです。しかし、このサーバー側の視点はオーディオ処理、フレーズのエンドポイント遅延、ネットワーク転送、およびOSのオーバーヘッドを考慮しません。",
  "ff88f9ab1bed87ff": "<strong>音声対音声のレイテンシを測るのは手動でも簡単です。</strong>",
  "5c50d1e0552ec173": "会話を録音し、その録音をオーディオ編集ソフトに読み込み、オーディオ波形を見て、ユーザーの発話の終了からLLMの発話の開始までを測定するだけです。",
  "c6c676bbd31ae60e": "本番用途の会話型ボイスアプリケーションを構築する場合、時折この方法でレイテンシの数値をさっと確認するとよいです。テスト時にネットワークのパケット損失とジッターをシミュレートするとさらによいです！",
  "1944a1b77ed65c4a": "音声から音声のレイテンシをプログラム的に測定するのは難しいです。一部のレイテンシはOSの深部で発生します。したがって、多くの可観測性ツールは最初の（オーディオ）バイト到着までの時間を測定します。これは総合的な音声対音声レイテンシの合理的な代理指標ですが、フレーズのエンドポイント変動やネットワークの往復時間など、測定していない要素が追跡手段がなければ問題になる可能性があることに注意してください。",
  "a17733a886139ba4": "<strong>会話型AIアプリケーションを構築しているなら、音声対音声で800msのレイテンシを目標にするのが良いでしょう。</strong>以下はユーザーのマイクからクラウドに送り、戻ってくる音声対音声のラウンドトリップの内訳です。これらの数値はかなり一般的で、合計は約1秒です。こんにちのLLMで安定して800msのラウンドトリップ時間を達成するのはチャレンジですが、不可能ではありません！",
  "de838855e4a6e04e": "ステージ",
  "48693e0569ffabdc": "時間（ms）",
  "08f258f9b2f8b761": "macOS マイク入力",
  "ab45b323a2c481b2": "opus エンコード",
  "87266bf5c6a407c9": "ネットワークスタックと転送",
  "2151d2469a73ad88": "パケット処理",
  "0ac4d9fa6d600100": "ジッターバッファ",
  "4ef9dd7f98d31a42": "opus デコード",
  "f806df707a8907ef": "文字起こしとエンドポイント検出",
  "983bd614bb5afece": "300",
  "7ca739958267bc9f": "LLM 初回バイト（ttfb）",
  "deeeb5df3f2cee6b": "350",
  "1c37fed04ab2656f": "文の集約",
  "a9a93d2e2477a717": "TTS 初回バイト（ttfb）",
  "2abaca4911e68fa9": "120",
  "e232ab8346670a40": "macOS スピーカー出力",
  "e9876d4cd71fd570": "合計（ms）",
  "40fb7164e459a388": "993",
  "c47895d27b46b296": "音声対音声会話のラウンドトリップ — レイテンシの内訳",
  "fa5a600157f31e7c": "我々は、すべてのモデルを同一のGPU対応クラスタ内にホスティングし、スループットではなくレイテンシ最適化を行うことで500msの音声対音声レイテンシを達成するPipecatエージェントを実証しました。このアプローチは現状では広く使われていません。モデルのホスティングは高コストです。また、オープンウェイトのLLMは、GPT-4oやGeminiのような最良の独自モデルに比べて音声AIで使われる頻度が低いです。音声AIエージェント向けのLLMについては次節を参照してください。",
  "51098cbe280c0df8": "ボイスユースケースではレイテンシが非常に重要なため、本ガイド全体でレイテンシが頻繁に取り上げられます。",
  "55c6dd8d2879e15b": "4.2. ボイスユースケース向けのLLM",
  "47f67b22e48e5da7": "2023年3月のGPT-4のリリースは、現在の音声AI時代の幕開けとなりました。GPT-4は、柔軟なマルチターン会話を維持でき、かつ有用な作業を行うために十分に正確な最初のLLMでした。今日では、GPT-4の後継であるGPT-4oが会話型音声AIの支配的なモデルとなっています。",
  "9e78a0c1a8654f6e": "他のモデルは、元のGPT-4よりもいくつかの点において同等かそれ以上の性能を発揮するようになっています：",
  "3cca3bad281a674c": "対話型の音声会話に耐える十分低いレイテンシ。",
  "1d31a1528cf3dea7": "指示への良い従順性。<sup>[8]</sup>",
  "c765ef9af923bcc1": "信頼できるFunction Calling。<sup>[9]</sup>",
  "25fdd435af64380a": "ハルシネーションやその他の不適切な応答の発生率が低い。",
  "dfc7e1b7819f2990": "個性とトーン。",
  "1240e7a50e5005ca": "コスト。",
  "382a99a4997ff093": "[8] モデルに特定のことを実行させるプロンプトの出しやすさはどれほどか？",
  "837f6cb43554601e": "[9] 音声AIエージェントはFunction Callingに大きく依存する。",
  "a2b94e3a0644fbb8": "しかし、現状、GPT-4oはオリジナルのGPT-4よりも優れています！特に指示への従順性、Function Calling、ハルシネーションの発生率低減において優れています。",
  "b521268bed53d2d8": "GPT-4oの主要な競合はGoogleのGemini 2.0 Flashです。Gemini 2.0 Flashは高速で、指示への従順性とFunction CallingにおいてGPT-4oと同等であり、価格も攻勢的です。",
  "e6d3ca4ff0ce6c05": "<strong>音声AIのユースケースは要求が厳しいため、一般的には利用可能な最良のモデルを使うのが妥当です。</strong> いずれ状況は変わり、最先端でないモデルでも音声AIのユースケースで広く採用されるのに十分になる時が来るでしょう。まだその段階ではありません。",
  "448363e342bea6cc": "4.2.1 LLM レイテンシ",
  "5c23fe6c96caaccf": "Claude Sonnetは音声AIに非常に良い選択肢となり得ますが、推論レイテンシ（最初のトークンまでの時間）がAnthropicの優先事項ではなかった点が問題です。Claude Sonnetの中央値レイテンシは通常、GPT-4oやGemini Flashの2倍で、P95のばらつきもはるかに大きいです。",
  "5e2c614c23f02239": "モデル",
  "ab904612c8be7f0f": "中央値 TTFT (ms)",
  "306d4252b675da29": "P95 TTFT (ms)",
  "9b816f4a6295f2b5": "GPT-4o",
  "841a05fd378a2c06": "460",
  "de0023e398111d43": "580",
  "0ced3491fe96b781": "GPT-4o mini",
  "09895de0407bcb03": "290",
  "db55da3fc3098e9c": "420",
  "cab28bc8feb26807": "GPT-4.1",
  "83151157c10d85af": "450",
  "172e1676eda470ed": "670",
  "a0089ee0749ba563": "Gemini 2.0 Flash",
  "2af4dd48399a5cf6": "380",
  "adf11fff920f353f": "Llama 4 Maverick (Groq)",
  "838f461c2fa673ce": "360",
  "100901942eca31f7": "Claude Sonnet 3.7",
  "2dadd95e5cb76bd0": "1,410",
  "fe0203d4ac0730c2": "2,140",
  "032bd2bc0c4cb95b": "最初のトークンまでの時間（TTFT）メトリクス：OpenAI、Anthropic、Google API - 2025年5月",
  "43a4f545c63cfd7e": "大まかな目安として、LLMのTTFTが500ms以下であればほとんどの音声AIユースケースで十分です。GPT-4oのTTFTは通常400〜500msです。Gemini Flashも同様です。",
  "765709ac33d3a869": "4.2.2 コスト比較",
  "3e798ffb67407b8b": "推論コストは頻繁かつ急速に低下しています。したがって、一般にコストはLLMを選ぶ際の重要な要因ではありません。Gemini 2.0 Flashの新たに発表された価格はGPT-4oと比べて10倍のコスト削減を実現しています。これが音声AIの状況にどのような影響を与えるかは注視が必要です。",
  "620303f0bfa5aed8": "3分の会話",
  "5d9413b8c291a986": "10分の会話",
  "56d70307a94404d2": "30分の会話",
  "a10a51deb1c76c65": "$0.009",
  "918a860301f11769": "$0.08",
  "75c5926fbc145110": "$0.75",
  "da5970c81423df2b": "$0.0004",
  "e04b18a911d01790": "$0.004",
  "342f61327eeb2c97": "$0.03",
  "69e1f8e6cfed229d": "複数の会話が発生するセッションのコストは、継続時間とともに超線形に増加します。30分のセッションは3分のセッションより概ね100倍の費用がかかります。キャッシュ、コンテキスト要約、その他の手法で長時間セッションのコストを削減できます。",
  "dea4d2562c7d7b50": "セッション長に対してコストは超線形に増加する点に注意してください。セッション中にコンテキストをトリミングまたは要約しない限り、長時間のセッションではコストが問題になります。これはspeech-to-speechへのモデルで特に当てはまります（下の <a href=\"#speech-to-speech\">項</a> を参照）。",
  "96ce17cbbad6b4ab": "コンテキスト増大という数学的性質により、音声会話の1分あたりコストを特定するのは難しくなります。さらに、APIプロバイダはトークンキャッシュを提供することが増えており、これはコストを相殺（およびレイテンシを低減）できますが、異なるユースケースのコスト見積もりを複雑にします。",
  "84a7a311002aac8b": "OpenAIの <a href=\"https://community.openai.com/t/new-realtime-api-voices-and-cache-pricing/998238\" target=\"_blank\">OpenAI Realtime API向けの自動トークンキャッシュ</a> は特に便利です。Googleも最近、すべてのバージョン2.5モデル向けに <a href=\"https://ai.google.dev/gemini-api/docs/caching?lang=python\" target=\"_blank\">暗黙のキャッシュ（implicit caching）</a> と呼ばれる類似機能を導入しました。",
  "f4c03f3eb7056099": "4.2.3 オープンソース / オープンウェイト",
  "0784030b2c378e6e": "MetaのLlama 3.3および4.0のオープンウェイトモデルは、ベンチマーク上でGPT-4よりも良い性能を示します。とはいえ、商用ユースケースにおいてGPT-4oやGeminiより常に優れているわけではありません。しかし、それらを基に構築したり自社インフラで実行したりできる能力は重要です。<sup>[11]</sup>",
  "0763bcf3576dbb3a": "多くのプロバイダがLlamaの推論エンドポイントを提供しており、サーバーレスGPUプラットフォームはLlamaをデプロイするためのさまざまなオプションを提供します。Metaは最近、ファーストパーティの推論APIを発表し、オープンウェイトのLlamaモデルが同社の重要な戦略的焦点であることを強く示しました。",
  "15986a49145c7c72": "Llamaファミリの中で興味深く有能なモデルの一つがUltravoxです。Ultravoxは<a href=\"https://github.com/fixie-ai/ultravox\" target=\"_blank\">オープンソースのネイティブ音声LLM</a>です。<a href=\"https://ultravox.ai/\" target=\"_blank\">Ultravoxの背後にある会社</a>は、商用レベルの音声対話APIも提供しています。Ultravoxは、Llama 3.3を音声領域に拡張し、音声AIユースケース向けにベースモデルの指示従順性とFunction Calling性能を改善するために多数の手法を活用しています。Ultravoxは、オープンソースAIエコシステムの利点とネイティブ音声モデルの有望な可能性の両方を示す例です。",
  "75347146bc6138cd": "我々は2025年に入ってオープンソース／オープンウェイトモデルの多くの進展を見ています。Llama 4はごく新しく、コミュニティは対話型の会話AIにおける実用的な性能をまだ評価中です。Alibabaの新しいQwen 3モデルは優れた中規模モデルで、初期ベンチマークではLlama 4と互角に競っています。さらに、DeepSeek、Google（Gemma）、Microsoft（Phi）から将来登場するオープンウェイトモデルも音声AIにとって良い選択肢になる可能性が高いと考えられます。",
  "257dcb48ecf264a1": "[11] 特定のユースケース向けにLLMをファインチューニングする予定があるなら、Llama 3.3 70Bは非常に良い出発点です。ファインチューニングについては下記を参照してください。",
  "e4bfe1394a4b2492": "4.2.4 音声→音声モデルはどうか？",
  "24063fd0316cf9d1": "音声→音声モデルは興味深く、比較的新しい発展です。音声→音声LLMはテキストではなく音声でプロンプトを与えられ、直接音声を出力できます。これにより、音声エージェントのオーケストレーションループにおける音声→テキストおよびテキスト→音声の部分が排除されます。",
  "0c1d0685bb4fdf72": "音声→音声モデルの潜在的な利点は次のとおりです：",
  "38d6acd66aa0a7d0": "レイテンシーの低下。",
  "36dc47009fe03269": "人間の会話のニュアンスを理解する能力の向上。",
  "c98dad02d144d24c": "より自然な音声出力。",
  "e69a7ba5147b7f4b": "OpenAIとGoogleは共に音声→音声のAPIを公開しています。大規模モデルを訓練し音声AIアプリケーションを構築する多くの人々は、音声→音声モデルが音声AIの未来であると考えています。",
  "9d34edb12ae27178": "しかし、現時点の音声→音声モデルとAPIは、ほとんどの本番環境の音声AIにとってまだ十分に良いとは言えません。",
  "0427167e5a0004b3": "今ある音声→音声モデルは、確かに現状のText-to-speechモデルより自然に聞こえます。OpenAIの<a href=\"https://platform.openai.com/docs/guides/audio\" target=\"_blank\">gpt4o-audio-preview</a><sup>[12]</sup>モデルは、音声AIの未来のプレビューのように確かに聞こえます。",
  "d1206b679c207c10": "[12] <a href=\"https://platform.openai.com/docs/guides/audio\" target=\"_blank\">OpenAI audio API docs</a>",
  "587e57e47fe5ee60": "ただし、音声→音声モデルはまだテキストモードのLLMほど成熟しておらず信頼性も十分とは言えません。",
  "ba84b70fffa58175": "理論的にはレイテンシーは低減可能ですが、音声はテキストよりも多くのトークンを使用します。トークンコンテキストが大きくなるとLLMが処理するのに時間がかかります。実際には、音声モデルは長い対話型会話において、テキストモデルより遅くなります。<sup>[13]</sup>",
  "b2fb5c6c321bfeef": "これらのモデルは理解力の向上が実際の利点であるように見えます。これは特にGemini 2.0 Flashの音声入力で顕著です。gpt-4o-audio-previewについては、テキストモードのGPT-4oより小さくやや能力が劣るモデルであるため、現時点では状況がやや不明瞭です。",
  "fb1087d7b07a429c": "より自然な音声出力は今でも明らかに知覚できます。しかしオーディオLLMは音声モードで奇妙な出力パターンを示すことがあり、テキストモードほど頻繁ではないものの、語の反復、時に不気味の谷に入る談話マーカー、文を完結できないことが時折あります。",
  "7f80fe8716ee494c": "[13] 音声モデルにおけるこのレイテンシー問題は、キャッシュ、巧妙なAPI設計、モデル自体のアーキテクチャ進化の組み合わせによって明確に解決可能です。",
  "f486d985dc7880d1": "これらの問題の中で最も大きいのは、マルチターン音声に必要な大きなコンテキストサイズです。ネイティブ音声の利点を得つつコンテキストサイズの欠点を回避する一つの方法は、各会話ターンをテキストと音声の混合として処理することです。最新のユーザーメッセージには音声を使用し、残りの会話履歴はテキストを使用します。",
  "b8b1d0f84df70f13": "OpenAIのベータ版音声→音声提供であるOpenAI Realtime APIは高速で音声品質は驚異的です。しかし、そのAPIの背後にあるモデルはフルのGPT-4oではなく小型のgpt-4o-audio-previewです。したがって指示従順性やファンクションコールは同等ではありません。Realtime APIで会話コンテキストを管理するのもやや扱いにくく、APIにはいくつかの新製品ならではの粗さがあります。<sup>[14]</sup>",
  "09ce59d97bd07c9a": "GoogleのMultimodal Live APIも有望であり、進化の初期段階にある音声→音声サービスです。このAPIはGeminiモデルの近未来像を示しています：長いコンテキストウィンドウ、優れたビジョン機能、高速推論、強力な音声理解、コード実行、検索に基づくグラウンディング。OpenAI Realtime API同様、Multimodal Live APIは現時点ではほとんどの本番音声AIアプリケーションにとって適切な選択肢とは言えません。",
  "94b1bccdfe2c6a9c": "音声→音声APIは比較的高価である点に注意してください。我々は<a href=\"https://dub.sh/voice-agents-010\" target=\"_blank\">OpenAI Realtime APIのコスト計算機</a>を作成しており、OpenAIの自動トークンキャッシュ機能を考慮してセッション長に応じたコストのスケーリングを示しています。",
  "6846eb4af0fccdb4": "我々は2025年に音声→音声分野で多くの進展が見られると予想しています。しかし、本番の音声AIアプリケーションがマルチモデルのアプローチから音声→音声APIへの移行をどれほど速く進めるかはまだ不明です。",
  "ad1e4fea2245a586": "[14] <a href=\"https://latent.space/p/realtime-api\" target=\"_blank\">Realtime APIに関する詳細ノート</a>を参照してください",
  "7f4a3750db8b8c7b": "OpenAI Realtime API コスト計算機",
  "9220a52fc7e1f247": "4.3. Speech-to-text",
  "4e94b0112c316849": "Speech-to-text(音声→テキスト)は音声AIの「入力」段階です。Speech-to-textは一般に<i>文字起こし</i>または<i>ASR</i>（自動音声認識）とも呼ばれます。",
  "cd7accf462b4e149": "音声AIでは、非常に低い文字起こしレイテンシーと非常に低い語誤り率が必要です。残念ながら、音声モデルを低レイテンシー向けに最適化すると精度にマイナスの影響があります。",
  "0afecf5fe5386995": "今日、低レイテンシー向けに設計されていない非常に優れた文字起こしモデルがいくつか存在します。Whisperは多くの製品やサービスで使われているオープンソースモデルです。非常に優れていますが、通常のTTFT(ファーストトークン到達時間)が500ms以上であるため、会話型の音声AIにはめったに使われません。",
  "85154b28c6e64f89": "4.3.1 DeepgramとGladia",
  "58d00c449bf5e46c": "多くの本番環境で利用される音声AIエージェントはSpeech-to-textに<a href=\"https://deepgram.com\" target=\"_blank\">Deepgram</a>または<a href=\"https://gladia.io\" target=\"_blank\">Gladia</a>を使用しています。Deepgramは、低レイテンシー、低語誤り率、低コストの優れた組み合わせを長年にわたり提供してきた商用のSpeech-to-textAI研究所であり、APIプラットフォームです。Gladiaは2022年設立の比較的新しい参入企業で、多言語サポートに特に強みを持ちます。",
  "d0c70a0955ae3a29": "DeepgramのモデルはセルフサーブのAPIとして、または顧客が自社システムで実行できるDockerコンテナとして提供されています。ほとんどの人はまずAPI経由でDeepgramのSpeech-to-textを使用し始めます。米国内のユーザではファーストトークン到達時間は通常約150msです。",
  "50e5d25fd0d04300": "スケーラブルなGPUクラスタを管理することは継続的な大きなDevOps作業であるため、APIから自社インフラでモデルをホストすることに移行するのは正当な理由がない限り行うべきではありません。正当な理由には次が含まれます：",
  "8fc86391dc16acf3": "音声／文字起こしデータをプライベートに保つこと。DeepgramはBAAや機密データ処理に関する契約を提供していますが、一部の顧客は音声および文字起こしデータを完全に管理したいと考えるでしょう。米国外の顧客は自国または地域内にデータを保持する法的義務がある場合があります。（デフォルトではDeepgramの利用規約はAPI経由で送信したすべてのデータで学習することを許可しています。エンタープライズプランではこれをオプトアウトできます。）",
  "5c328da1478a7bd7": "レイテンシーの削減。Deepgramは米国外に推論サーバーを持ちません。ヨーロッパからのTTFTは約250ms、インドからは約350msです。",
  "a333949d9a982e86": "Deepgramはファインチューニングサービスを提供しており、ユースケースに比較的珍しい語彙、話し方、またはアクセントが含まれる場合に誤り率を下げるのに役立ちます。",
  "55d1d2cedb7e3faa": "Gladiaは英語圏外の新しい音声AIプロジェクトで最もよく見られるSpeech-to-textプロバイダです。Gladiaはフランスに本社を置き、米国とヨーロッパに推論サーバーを持ち、100以上の言語をサポートしています。",
  "2b47fb7a8f5a2f0b": "Gladiaはホスト型APIと自社インフラでモデルを実行するオプションを提供しています。GladiaのAPIはヨーロッパのデータ居住要件があるアプリケーションで利用できます。",
  "f837adedecdbb21c": "4.3.2 プロンプトはLLMを助ける",
  "997847e97763889d": "文字起こしの誤りの大部分は、リアルタイムストリームで文字起こしモデルが利用できるコンテキストが非常に少ないことに起因します。",
  "030251778c39f894": "今日のLLMは文字起こし誤りを回避するのに十分賢いです。LLMが推論を行う際には完全な会話コンテキストにアクセスできます。したがって、入力がユーザー音声の文字起こしであり、その点を考慮して推論すべきであるとLLMに伝えることができます。",
  "b6ff57f7f1f3b728": "音声AIエージェント向けのプロンプト例の文言。",
  "cde9dc4e8ead82f6": "4.3.3 その他のSpeech-to-textの選択肢",
  "bb2e574659d8a1de": "我々は2025年にSpeech-to-text分野で多くの新しい開発が起こると予想しています。2025年4月初旬時点で注目している新展開のいくつか：",
  "0270b4405e06de8e": "OpenAIは<a href=\"https://openai.com/index/introducing-our-next-generation-audio-models/\">最近</a>、gpt-4o-transcribeとgpt-4o-mini-transcribeという2つの新しいSpeech-to-textモデルを発表しました。",
  "d5d659a8478dad4d": "他の評判の良い音声技術企業である<a href=\"https://speechmatics.com/\">Speechmatics</a>と<a href=\"https://assembly.ai/\">AssemblyAI</a>は、会話型音声により注力し始めており、ストリーミングAPIやより高速なTTFTのモデルを提供し始めています。",
  "8f449e5ee68f4b46": "NVIDIAはベンチマークで非常に良好な性能を示す<a href=\"https://developer.nvidia.com/blog/new-standard-for-speech-recognition-and-translation-from-the-nvidia-nemo-canary-model/\">オープンソース音声モデル</a>を提供しています。",
  "c82d02cfe91ae1c4": "推論を提供する企業である<a href=\"https://groq.com/\">Groq</a>のホスト版Whisper Large v3 Turboは現在中央値のTTFTが300ms未満であり、会話型音声アプリケーションの選択肢の範囲に入っています。これは我々がこのレイテンシーを達成したのを確認した最初のWhisper APIサービスです。",
  "85aa3816fc28bdc7": "主要なクラウドサービスはすべてSpeech-to-textのAPIを提供しています。現時点で、低レイテンシの音声AIユースケースにおいては、どれもDeepgramやGladiaほど優れてはいません。",
  "56caf40928e29a7e": "ただし、次の場合は Azure AI Speech、Amazon Transcribe、または Google Speech-to-Text を使用したいことがあるかもしれません:",
  "7ff5a70f6933be1e": "既にこれらのクラウドプロバイダのいずれかと大きなコミット済み支出やデータ処理の取り決めがある場合。",
  "39278720c8674a9b": "これらのクラウドプロバイダのいずれかに大量のスタートアップクレジットがあり、使い切りたい場合！",
  "19115d3c0628471d": "4.3.4 Google Gemini を使った文字起こし",
  "e07f01f85bcb24f4": "Gemini 2.0 Flash を低コストのネイティブ音声モデルとして活用する一つの方法は、会話生成と文字起こしの両方に Gemini 2.0 を使うことです。",
  "249d98cbcc482555": "これを行うには、2つの並列な推論プロセスを実行する必要があります。",
  "1323c099020211f4": "一方の推論プロセスは会話の応答を生成します。",
  "80bf7b614cafa2a8": "もう一方の推論プロセスはユーザーの発話を文字起こしします。",
  "9ce37d60e0271f7a": "各音声入力は単一のターンのみに使用されます。完全な会話コンテキストは常に最新のユーザー発話の音声と、過去の全ての入力および出力のテキスト文字起こしです。",
  "303983bbe8cee018": "これにより両方の利点が得られます: 現在のユーザー発話に対するネイティブな音声理解と、全体コンテキストのトークン数削減。<sup>[15]</sup>",
  "9ddeb5d31543fe54": "[15] 音声をテキストに置き換えるとトークン数は約10倍少なくなります。10分間の会話では、処理される総トークン数、したがって入力トークンのコストは約100倍削減されます。（会話履歴は各ターンで累積するため。）",
  "c94269c57cb79dac": "ここでは、これらの並列推論プロセスを Pipecat パイプラインとして実装するためのコードを示します。",
  "362499221352e25e": "論理は次のとおりです。",
  "c0af54a6bdc48005": "会話用LLMは会話履歴をテキストとして受け取り、さらに各新しいターンのユーザー発話をネイティブ音声として受け取り、会話応答を出力します。",
  "247478d46b788fc6": "文字起こし用LLMは同じ入力を受け取りますが、最新のユーザー発話の逐語的な文字起こしを出力します。",
  "6603a04c5ef5f641": "各会話の最後に、ユーザーの音声コンテキスト項目はその音声の文字起こしに置き換えられます。",
  "547c822a5e6343dc": "Gemini のトークンあたりコストは非常に低いため、この方法は実際には文字起こしに Deepgram を使うより安価になることがあります。",
  "7a4ee7dd21b45c43": "ここで重要なのは、Gemini 2.0 Flash を音声→音声モデルとして使用しているわけではなく、その音声理解能力を利用しているという点です。モデルをプロンプトして、会話モードと文字起こしモードという2つの異なる「モード」で動作させています。",
  "5ac85497a1772539": "このようなLLMの使い方は、最先端のLLMアーキテクチャの持つ可能性を示します。このアプローチは新しくまだ実験的ですが、初期のテストでは他のどの手法よりも優れた会話理解とより正確な文字起こしができる可能性が示唆されています。ただし欠点もあります。文字起こしのレイテンシは専用のSpeech-to-textモデルほど良くありません。2つの推論プロセスを実行しコンテキスト要素を入れ替える複雑さは相当なものです。専用の文字起こしモデルでは問題とならないプロンプトインジェクションやコンテキスト追従エラーに対して脆弱になります。",
  "4ceff62a0352a446": "ここに文字起こし用のシステム指示（プロンプト）を示します。",
  "579610246425b948": "4.4. Text-to-speech",
  "ed354e94a818d077": "Text-to-speechは、音声→音声処理ループの出力段階です。",
  "a0b7b0c20664b8a7": "音声AI開発者は次の基準で音声モデル／サービスを選びます:",
  "92f722dbb7855d5e": "音声の自然さ（総合的な品質）<sup>[16]</sup>",
  "26c992679bf49d3e": "レイテンシ<sup>[17]</sup>",
  "204a5eb2cd28bcfd": "コスト",
  "cf1b517ca36200a3": "対応言語",
  "c409558fddd9e1d3": "単語レベルのタイムスタンプ対応",
  "7a21ca1e0fee8f01": "声、アクセント、発音のカスタマイズ能力",
  "1b13338064798b8f": "[16] 発音、イントネーション、話速、強勢、リズム、感情的価数。",
  "d65845f5a1fa0503": "[17] 最初の音声バイトまでの時間。",
  "e47a26f56df16933": "音声の選択肢は2024年に大幅に増えました。新しいスタートアップが登場し、最高品質の音声は大幅に向上しました。すべての提供者がレイテンシを改善しました。",
  "50d70c25771862de": "Speech-to-textの場合と同様に、主要なクラウドプロバイダはすべてText-to-speech製品を持っています。<sup>[18]</sup> しかし現在はスタートアップのモデルの方が優れているため、多くの音声AI開発者はそれらを使っていません。",
  "150eab3adf5687d2": "[18] Azure AI Speech、Amazon Polly、Google Cloud Text-to-Speech。",
  "f9b8d260fd487c9a": "リアルタイム会話型ボイスモデルで最も勢いのあるラボは（アルファベット順）:",
  "51fad0d2f246b9df": "Cartesia – 独自の状態空間モデルアーキテクチャを使用して、高品質と低レイテンシを両立しています。",
  "2b64ab9f71bbf904": "Deepgram – レイテンシと低コストを優先しています。",
  "81a18b78e1ed23a2": "ElevenLabs – 感情的および文脈的なリアリズムを重視しています。",
  "e6f6ca25965933ec": "Rime – 会話音声のみで訓練されたカスタマイズ可能なTTSモデルを提供しています。",
  "d2785fdf4098ac5d": "これら4社はいずれも強力なモデル、エンジニアリングチーム、安定かつ高性能なAPIを持っています。Cartesia、Deepgram、Rime のモデルは自社インフラにデプロイできます。",
  "0c04cadbcc06b9ea": "1分あたりのコスト（概算）",
  "65033e11d416ddb9": "中央値 TTFB (ms)",
  "524edba1c787085c": "P95 TTFB (ms)",
  "30f563abc22fb7e3": "平均プレスピーチ ms",
  "fbafe2603c3c8246": "Cartesia",
  "74ff5b63437dd1bd": "$0.02",
  "2397346b45823e07": "190",
  "39bb88f40d3aa2b2": "260",
  "a512db2741cd2069": "160",
  "c44f658198e27405": "Deepgram",
  "1458baa07a15c910": "$0.008",
  "9ae2bdd7beedc2e7": "150",
  "88820462180e5c89": "320",
  "c6ef2e63173cda90": "ElevenLabs Turbo v2",
  "5e5c743a015ff8d8": "510",
  "51885bf7c3d8ba6d": "ElevenLabs Flash v2",
  "e6e3bc2817f7a6a5": "$0.04",
  "734d0759cdb4e0d0": "170",
  "ad57366865126e55": "100",
  "4a9c2a4589d6bdcd": "Rime",
  "62854ea2c209fb7f": "$0.024",
  "9644294ac4ffb309": "340",
  "38879b6376fbabdc": "980",
  "598ade3f63c97fc2": "1分あたりの概算コストおよびTime to first byteまでの時間の指標 – 2025年2月。コストは利用量や使用する機能に依存する点に注意してください。avg pre-speechは、最初の発話フレームの前にオーディオストリーム内で発生する平均的な初期無音間隔です。",
  "246dd292cea81f7c": "Speech-to-textと同様に、非英語言語のサポートには音声モデルによって大きな差があります。非英語のユースケース向けに音声AIを構築する場合は、より広範なテストが必要になる可能性が高いです。様々なサービスや複数の音声をテストして、満足できるソリューションを見つけてください。",
  "0bbefd7e12867ec4": "すべての音声モデルは時折単語を誤発音するし、固有名詞や珍しい語の発音を必ずしも知っているわけではありません。",
  "ceb3689fe1be2a35": "一部のサービスは発音を調整する機能を提供しています。これは、出力テキストに特定の固有名詞が含まれることが事前に分かっている場合に便利です。もし音声サービスが音素ベースの調整をサポートしていない場合、LLMに特定の単語の「音のような」綴りを出力させるようプロンプトすることもできます。例えば、NVIDIAの代わりに in-vidia と発音させたり。",
  "667da2cb8883be88": "LLMのテキスト出力を使って発音を誘導するためのプロンプト例の文言",
  "5a9b7892198f2925": "会話型の音声では、ユーザーが聞いたテキストを追跡できることが、正確な会話コンテキストを維持するうえで重要です。これは、モデルが音声に加えて単語レベルのタイムスタンプメタデータを生成し、タイムスタンプデータが元の入力テキストへ逆変換可能であることを要求します。これは音声モデルにとって比較的新しい機能です。上の表にあるモデルのうちElevenLabs Flashを除くすべてが単語レベルのタイムスタンプをサポートしています。",
  "692df5bcfb0bb059": "Cartesia APIからの単語レベルタイムスタンプ。",
  "9c179d9a813a4f89": "さらに、リアルタイムストリーミングAPIが利用できればとても便利です。会話型音声アプリケーションでは同時に複数の音声推論を行うことがよくあります。音声エージェントには、進行中の推論を中断でき、各推論リクエストを出力ストリームに紐づけるような実装が必要になります。音声モデルプロバイダのストリーミングAPIは比較的新しく、まだ進化途上です。現時点では、CartesiaとRimeが最も成熟したストリーミングサポートをPipecatで使える形で提供しています。",
  "4df55f9cfcfe2159": "音声モデルの進歩は2025年も続くと予想されます。",
  "5467c9b000b87e03": "上記に記載された企業のいくつかは、年の前半に新モデルを出すことを示唆しています。",
  "2f6cd426584db6ae": "OpenAIは<a href=\"https://openai.com/index/introducing-our-next-generation-audio-models/\" target=\"_blank\">最近、新しいテキスト読み上げモデル</a> gpt-4o-mini-tts をリリースしました。このモデルは完全に制御可能であるため、音声モデルに対して「何を言うか」だけでなく「どのように話すか」を指示することが可能になります。gpt-4o-mini-ttsの制御を試すには<a href=\"https://openai.fm\" target=\"_blank\">openai.fm</a>で実験できます。",
  "a43366bda5e13399": "<a href=\"https://groq.com/\" target=\"_blank\">Groq  </a>と<a href=\"https://play.ai/\" target=\"_blank\">PlayAI</a>は最近<a href=\"https://groq.com/build-fast-with-text-to-speech/\" target=\"_blank\">提携を発表しました</a>。Groqは高速な推論で知られ、PlayAIは30以上の言語をサポートする低レイテンシの音声モデルを提供します。",
  "8e080aaa2d496b4f": "4.5. オーディオ処理",
  "8bdd597476d85a46": "優れた音声AIプラットフォームやライブラリは、オーディオ取り込みと処理の複雑さをほとんど隠してくれます。しかし、複雑な音声エージェントを構築すると、いずれオーディオ処理のバグやコーナーケースに直面します。<sup>[19]</sup> したがって、オーディオ入力パイプラインをざっくり理解しておくにこしたことはないです。",
  "199c69ef11c03cbf": "[19] …これはソフトウェアのすべての事柄に一般化され、そしておそらく人生のほとんどの事柄にも当てはまります。",
  "4ec3906f9139d705": "4.5.1 マイクと自動利得制御",
  "62ea118162afe2e9": "現代のマイクは、高度なハードウェアと大量の低レイヤーソフトウェアが組み合わさった非常に洗練されたデバイスです。これは素晴らしいことで、モバイル機器、ノートパソコン、Bluetoothイヤーピースなどに内蔵された小型マイクから優れたオーディオを得られます。",
  "fa888861a0de997b": "しかし時には、この低レイヤーのソフトウェアが望んだ通りに動作しないことがあります。特にBluetoothデバイスは音声入力に数百ミリ秒のレイテンシを追加することがあります。これは音声AI開発者にとって制御外であることが多いですが、特定のユーザーが使用しているOSや入力デバイスによってレイテンシが大きく異なる可能性がある点は把握しておくべきです。",
  "fff17158e8910f6e": "ほとんどのオーディオキャプチャパイプラインは入力信号に対して何らかの自動利得制御（AGC）を適用します。これも通常は望ましい挙動で、ユーザーのマイクからの距離などを補正してくれます。一部の自動利得制御は無効にできることがありますが、消費者向けデバイスでは完全に無効にできない場合が多いです。",
  "4051b8b39987e400": "4.5.2 エコーキャンセレーション",
  "e0666be64cc2f2b8": "ユーザーが電話を耳に当てていたりヘッドフォンを着用している場合、ローカルマイクとスピーカー間のフィードバックを心配する必要はありません。しかし、スピーカーフォンで会話している場合やヘッドフォンなしのノートパソコンを使っている場合は、優れたエコーキャンセレーションが極めて重要です。",
  "79ba55177258a08b": "エコーキャンセレーションはレイテンシに非常に敏感なため、エコーキャンセレーションはデバイス上で実行する必要があります。今日では電話システム、ウェブブラウザ、WebRTCを使ったネイティブアプリケーションのSDKに組み込まれています。<sup>[20]</sup>",
  "88d69de4ae5347cc": "したがって、音声AI、WebRTC、または電話向けSDKを使用している場合、ほとんどの実世界シナリオで「そのまま動作する」エコーキャンセレーションが利用できるはずです。自前で音声キャプチャパイプラインを構築している場合は、エコーキャンセレーションロジックを統合する方法を見つける必要があります。例えば、WebSocketベースのReact Nativeアプリを構築している場合、デフォルトではエコーキャンセレーションはありません。<sup>[21]</sup>",
  "11192e6bed4a68d7": "[20] Firefoxのエコーキャンセレーションはあまり優れていない点に注意してください。音声AI開発者はChromeとSafariを主なプラットフォームとして構築し、時間が許せばFirefoxでテストすることを推奨します。",
  "e42392fc2f9c4ecf": "[21] つい最近、ある人のReact Nativeアプリのオーディオ問題のデバッグを手伝いました。根本原因は、音声AIやWebRTC SDKを使っていなかったためエコーキャンセレーションを実装する必要があることに気づいていなかったことでした。",
  "2b31ac21287b6132": "4.5.3 ノイズ抑制、音声、音楽",
  "3047907dcb0176f3": "電話システムやWebRTCのオーディオ取り込みパイプラインは、ほとんど常に「音声モード」をデフォルトにします。音声は音楽よりもはるかに圧縮可能で、狭帯域信号に対するノイズ低減やエコーキャンセレーションアルゴリズムは実装が容易です。",
  "28bb07a3b209b13c": "多くの電話プラットフォームは8kHz音声しかサポートしていません。これは現代の基準では明らかに低品質です。この制限があるシステムを経由している場合、対処のしようがありません。ユーザーが品質の低さに気付くかどうかは場合によります — ほとんどの人は電話通話の音質に対して期待値が低いです。",
  "b65c73b8c7933c9c": "WebRTCは非常に高品質なオーディオをサポートします。<sup>[22]</sup> WebRTCのデフォルト設定は通常、48kHzサンプルレート、モノラル、32 kbpsのOpusエンコード、および適度なノイズ抑制アルゴリズムです。これらの設定は音声向けに最適化されており、幅広いデバイスや環境で機能するため、音声AIには一般的に適切な選択です。",
  "5882142c81076c76": "これらの設定では音楽は良い音にはなりません！",
  "abb15d2fbfd68c45": "WebRTC接続で音楽を送信する必要がある場合、次のようなことを行うとよいでしょう：",
  "c42b1f236e2b913d": "エコーキャンセレーションをオフにする（ユーザーはヘッドフォンを着用する必要があります）。",
  "b24ca3e9e724d632": "ノイズ抑制をオフにする。",
  "9430dcd8ab9ccdd1": "必要に応じてステレオを有効にする。",
  "bfedb01707d8cb79": "Opusのエンコードビットレートを上げる（モノラルなら64 kbps、ステレオなら96 kbpsまたは128 kbpsが良い目安です）。",
  "ac20541c82c954e3": "[22] 高品質オーディオのユースケースの例：",
  "9ddd18c6bfc1613c": "LLM教師による音楽レッスン。",
  "5da2296c8cdf6843": "背景音や音楽を含むポッドキャストの録音。",
  "963465bb68b3b7af": "対話的に生成されるAI音楽。",
  "3e522d14f3d84d4f": "4.5.4 エンコーディング",
  "f3683a40110f8f7e": "エンコーディングは、音声データをネットワーク接続で送信するためにどのようにフォーマットするかの総称です。<sup>[23]</sup>",
  "57f671cf32056c31": "[23]（またはファイルに保存する場合。）",
  "ccaef15a34b250ed": "リアルタイム通信で一般的なエンコーディングには次のものがあります：",
  "8161c7519c7dbcfb": "16ビットPCM形式の非圧縮オーディオ。",
  "34e123d34bd0ea3c": "Opus — WebRTCおよび一部の電話システム。",
  "12b56ce993c6a7bf": "G.711 — 幅広いサポートを持つ標準的な電話用コーデック。",
  "e184853401081b4f": "コーデック",
  "0b2b7f69b8eff531": "ビットレート",
  "1b2c08a8733d7ff1": "品質",
  "b697dd6a71d92789": "ユースケース",
  "0f97ea0ea65e8824": "16ビットPCM",
  "c331b4fff6017046": "384 kbps（モノラル 24 kHz）",
  "334593116e257e1d": "非常に高い（ほぼ無損失）",
  "ca8146475d8bf040": "音声録音、組み込みシステム、単純なデコードが重要な環境",
  "126d3b88ab0b0766": "Opus 32 kbps",
  "bcf057bee0079a17": "32 kbps",
  "ad80f82b0b4682e5": "良好（音声に最適化されたサイコアコースティック圧縮）",
  "38ed083f14a72c93": "ビデオ通話、低帯域幅ストリーミング、ポッドキャスティング",
  "403b5beb6152ca93": "Opus 96 kbps",
  "45220020d133703d": "96 kbps",
  "81ec604f246b7b76": "非常に良い〜優秀（サイコアコースティック圧縮）",
  "84f994c86c1d9f52": "ストリーミング、音楽、音声アーカイブ",
  "2a760c894e2e431e": "G.711（8 kHz）",
  "e38d61b05dc86a63": "64 kbps",
  "9281ce4704e645db": "低品質（帯域幅制限、音声中心）",
  "306bc452058e5fbe": "レガシーなVoIPシステム、電話、ファクス伝送、音声メッセージング",
  "325ec3bdc3e3aa39": "音声AIで最も頻繁に使用されるオーディオコーデック",
  "44310a1829dfe7f7": "これら三つの選択肢の中では、Opusが圧倒的に最良です。Opusはウェブブラウザに組み込まれており、低遅延コーデックとしてゼロから設計されていて非常に効率的です。幅広いビットレートで良好に動作し、音声と高忠実度の両方のユースケースをサポートします。",
  "8530f364b6c537e8": "16ビットPCMは「生のオーディオ」です。サンプリングレートとデータ型が正しく指定されていれば、PCMのオーディオフレームをソフトウェアのサウンドチャネルに直接送信できます。ただし、この非圧縮オーディオは一般的にインターネット接続で送信したいものではないことに注意してください。24 kHzのPCMはビットレートが384 kbpsです。これは多くの実際のエンドユーザーデバイスからの接続ではリアルタイムでバイトを配信するのが難しいほど大きなビットレートです。",
  "f7544c27d6b72b73": "4.5.5 サーバーサイドノイズ処理と話者分離",
  "8f801782b8ddd032": "音声認識（Speech-to-text）や音声活動検出モデルは、通常、一般的な環境ノイズ（街の音、犬の鳴き声、マイク近くの大きなファン、キーボードのクリックなど）を無視できます。したがって、多くの人間同士のユースケースで重要な従来の「ノイズ除去」アルゴリズムは、音声AIにとってそこまで重要ではありません。",
  "c735e71dafff489f": "しかし、音声AIに特に有用な音声処理が一つあります：主要話者の分離です。主要話者の分離は背景の会話を抑制します。これにより文字起こしの精度が大幅に向上する可能性があります。",
  "10691848f62af5f4": "空港のような環境から音声エージェントに話しかけようとする状況を想像してください。携帯のマイクはゲート案内や通行人の会話など、多くの背景音を拾いやすいです。LLMが見るテキストの文字起こしにそうした背景音が入って欲しくありません！",
  "0e62b736615a2e7e": "または、リビングでテレビやラジオが背景で流れているユーザーを想像してください。人間は低音量の背景会話を比較的うまくフィルタリングできるため、カスタマーサポートに電話する前にテレビやラジオを消すことを思いつかない場合があります。",
  "94ffa9e9e8bf34a8": "独自の音声AIパイプラインで使用できる最良の話者分離モデルは、<a href=\"https://krisp.ai\" target=\"_blank\">Krisp</a>が提供しています。ライセンスは主にエンタープライズユーザーを対象としており、安価ではありません。しかし、大規模な商用ユースケースにおいては、コストにみあう音声エージェントの性能向上が見込めます。",
  "9b9d0f4811b1d699": "OpenAIは最近、Realtime APIの一部として新しいノイズ低減機能を出荷しました。参照ドキュメントは<a href=\"https://platform.openai.com/docs/guides/realtime-transcription#realtime-transcription-sessions\" target=\"_blank\">こちら</a>です。",
  "5ecf041033edd83c": "Krisp処理要素を含むPipecatパイプライン",
  "4837f069ca255005": "4.5.6 音声活動検出",
  "dd09bf87469cd765": "音声活動検出（VAD）のステージは、ほとんどすべての音声AIパイプラインの一部です。VADはオーディオセグメントを「話し声」と「無音（話していない）」に分類します。VADについては下の<a href=\"#turn-detection\">ターン検出</a>セクションで詳しく説明します。",
  "f8cfb8cb645390db": "4.6. ネットワーク輸送",
  "7130bc58274cc928": "4.6.1 WebSocketsとWebRTC",
  "d9f9a5a9453b515b": "WebSocketsとWebRTCはいずれもオーディオストリーミングにAIサービスで使用されます。",
  "bb730efb096a189b": "WebSocketsはサーバー間ユースケースに最適です。遅延が主要な懸念でないユースケースでも問題なく、プロトタイピングや一般的なハッキングに適しています。",
  "c8ad2099f256ce63": "WebSocketsは本番環境におけるクライアント—サーバー間のリアルタイムメディア接続で使用すべきではありません。",
  "b82269928be3094a": "ブラウザまたはネイティブモバイルアプリを構築していて、会話遅延（対話的レイテンシ）がアプリケーションにとって重要である場合は、アプリから音声を送受信するためにWebRTC接続を使用するべきです。",
  "1de50fef562d6f23": "エンドユーザーデバイスへのリアルタイムメディア配信におけるWebSocketsの主な問題点は次のとおりです：",
  "ef52a79c1df00c34": "WebSockets は TCP 上に構築されているため、オーディオストリームはHOLブロッキングの影響を受けます。",
  "0a2d2a2e84f17d7e": "WebRTC に使用される Opus オーディオコーデックは、WebRTC の帯域推定やパケットペーシング（輻輳制御）ロジックと密に連携しており、WebSocket 接続だとレイテンシを蓄積してしまうようなネットワーク挙動に対しても WebRTC のオーディオストリームは対応できます。",
  "ea98687a502790bb": "Opus オーディオコーデックは非常に優れた前方誤り訂正を備えており、比較的高いパケット損失に対してもオーディオストリームを堅牢にします。（ただし、これはネットワークトランスポートが遅延到着パケットを破棄でき、ヘッドオブラインブロッキングを行わない場合のみ有効です。）",
  "a7802cb3c9ba5627": "WebRTC のオーディオは自動的にタイムスタンプが付与されるため、再生や途切れ検知のロジックは自明になります。",
  "98b38565ca26e8a8": "WebRTC ではパフォーマンスおよびメディア品質の統計データを取得できます。優れた WebRTC プラットフォームは詳細なダッシュボードと分析を提供します。このレベルの可観測性は、WebSockets に対しては非常に困難か不可能に近い場合があります。",
  "587239f833969fcc": "WebSocket の再接続ロジsックは堅牢に実装するのがかなり難しいです。ping/ack フレームワークを構築する必要があるか、WebSocket ライブラリが提供するフレームワークを十分にテストして理解する必要があります。TCP のタイムアウトや接続イベントはプラットフォームによって挙動が異なります。",
  "7b8442b1e3974042": "最後に、今日の優れた WebRTC 実装には非常に優れたエコーキャンセル、ノイズ抑制、および自動利得制御が備わっています。",
  "eeca681965641da8": "WebRTC は 2 つの方法で使用できます。",
  "07fcf89d22cc1eea": "クラウド内の WebRTC サーバーを経由するルーティング。",
  "b1076f26587c668d": "クライアントデバイスと音声AI プロセスの間で直接接続を確立すること。",
  "3a075bda18cfc1ac": "クラウドサーバーを経由するルーティングは、多くの現実的なユースケースでより良いパフォーマンスを発揮します（下記の <a href=\"#network-routing\">network routing</a> を参照）。クラウドインフラストラクチャは、直接接続では容易に、あるいは大規模にサポートしにくい多数の機能（マルチ参加者セッション、電話システムとの統合、録音など）を可能にします。",
  "7c793fc7dd95be1f": "しかし「サーバーレス」WebRTC は多くの音声AIのユースケースに適しています。Pipecat は <a href=\"https://docs.pipecat.ai/server/services/transport/small-webrtc\" target=\"_blank\">SmallWebRTCTransport</a> クラスを通じてサーバーレス WebRTC をサポートしています。また、HuggingFace の <a href=\"https://fastrtc.org/\" target=\"_blank\">FastRTC</a> のようなフレームワークは、このネットワーキングパターンを中心に構築されています。",
  "ff60246fb4b34517": "4.6.2 HTTP",
  "2622697885a6fb1b": "HTTP は音声AI にとってもなお有用かつ重要です！HTTP はインターネット上のサービス相互接続の共通言語です。REST API は HTTP です。Webhook も HTTP です。",
  "48fbf719f42548b8": "テキスト指向の推論は HTTP を通じて行われるため、音声AI パイプラインは通常、会話ループの LLM 部分のために HTTP API を呼び出します。",
  "5a224494dc28df4b": "音声エージェントは外部サービスや内部 API と統合する際にも HTTP を使用します。便利な手法の一つは、LLM のFunction Callingを HTTP エンドポイントにプロキシすることです。これにより、音声AI エージェントの実装やDevOpsをFunction Callingの実装から切り離せます。",
  "42838d8add4305cc": "マルチモーダル AI アプリケーションは、HTTP と WebRTC の両方のコードパスを実装したくなることがよくあります。テキストモードとボイスモードの両方をサポートするチャットアプリを想像してください。会話状態はどちらの接続経路からもアクセスできる必要があり、これはクライアント側とサーバー側両方のコード（例えば Kubernetes ポッドや Docker コンテナのアーキテクチャなど）に影響を及ぼします。",
  "cc61ba2d99049fb2": "HTTP の 2 つの欠点は、レイテンシと長寿命の双方向接続を実装する難しさです。",
  "bbd0a7fadf3ba9e8": "暗号化された HTTP 接続のセットアップには複数のネットワークリクエスト往復が必要です。メディア接続のセットアップ時間を 30ms より短くするのは相当難しく、最適化されたサーバーでも実際の最初のバイト送信までの時間は 100ms 前後になることが多いです。",
  "c66f6f74ea2c3205": "長時間維持される双方向の HTTP 接続は管理が難しいため、通常は WebSockets を使用した方が良いです。",
  "5ed6c1b0692b48ed": "HTTP は TCP ベースのプロトコルなので、WebSockets に影響するのと同じヘッドオブラインブロッキングの問題が HTTP にも発生します。",
  "36838e921a811472": "HTTP 上で生のバイナリデータを送ることは一般的でないため、多くの API はバイナリを base64 エンコードすることを選び、これによりメディアストリームのビットレートが増加します。",
  "937f981afb6cb426": "ここで QUIC の話になります …",
  "7083ab54794c71a2": "HTTP と WebRTC の両方をネットワーク通信に使用する音声AI エージェント。",
  "4687e3375eae9695": "4.6.3 QUIC と MoQ",
  "5df8bd0ca45a8ca4": "QUIC は最新バージョンの HTTP（HTTP/3）のトランスポート層として、さらに柔軟に他のインターネット規模のユースケースもサポートするよう設計された新しいネットワークプロトコルです。",
  "964cd761480998f8": "QUIC は UDP ベースのプロトコルであり、HTTP に関連する上記のすべての問題に対処します。QUIC により接続時間の短縮、双方向ストリーム、ヘッドオブラインブロッキングの解消が得られます。Google や Facebook は QUIC を着実に展開しており、現在では一部の HTTP リクエストがインターネット上を TCP ではなく UDP パケットとして通過することがあります。<sup>[24]</sup>",
  "f9b2ff7b548f810a": "[24] 長年インターネット上で構築してきた人にとっては少し 🤯 なことです。HTTP は常に TCP ベースのプロトコルだと考えられてきました！",
  "b9ab24020673aac2": "QUIC はインターネット上のメディアストリーミングの将来において大きな役割を果たすでしょう。リアルタイムメディアストリーミング向けの QUIC ベースプロトコルへの移行には時間がかかります。QUIC ベースの音声エージェントを構築する上での障壁の一つは、Safari がまだ WebSockets の QUIC ベース進化版である <a href=\"https://w3c.github.io/webtransport/\" target=\"_blank\">WebTransport</a> をサポートしていないことです。",
  "d12c67af927bb3eb": "IETF の Media over QUIC ワーキンググループ<sup>[25]</sup> は「メディアの取り込みと配信のためのシンプルな低遅延メディア配信ソリューション」を開発することを目的としています。すべての標準化活動に共通するように、重要なユースケースの最大の幅を最も単純な構成要素でサポートする方法を詰めるのは容易ではありません。人々はオンデマンドビデオストリーミング、大規模なビデオ放送、ライブビデオストリーミング、多数参加者の低遅延セッション、低遅延の1:1 セッションなどに QUIC を使うことに期待しています。",
  "ac4116ea2ab42ae5": "[25] <a href=\"https://datatracker.ietf.org/group/moq/about/\" target=\"_blank\">IETF Media Over QUIC working group</a>",
  "6a0fb0e415750b54": "リアルタイムの音声AI ユースケースは、MoQ 標準の開発に影響を与えるのにちょうど良いタイミングで成長しています。",
  "cb8b779ece083c25": "4.6.4 ネットワークルーティング",
  "54d2e364b421d6f4": "どのようなプロトコル基盤であっても長距離のネットワーク接続におけるレイテンシとリアルタイムメディアの信頼性は課題です。",
  "db73025912db6a8e": "<strong>リアルタイムメディア配信では、サーバーをユーザーにできるだけ近づけるべきです。</strong>",
  "6c388aa1abb0df7d": "例えば、英国のユーザーから北カリフォルニアにある AWS us-west-1 にホストされたサーバーへの往復パケット時間は通常約 140 ミリ秒になります。比較として、同じユーザーから AWS eu-west-2 への RTT は一般的に 15 ミリ秒以下です。",
  "8fe9f9f7ebb73927": "英国のユーザーから AWS us-west-1 への RTT は AWS eu-west-2 への RTT より約 100ms 大きい",
  "cbfba218df48b687": "それは 100 ミリ秒以上の差です — 音声間レイテンシ目標が 1,000 ミリ秒である場合、あなたのレイテンシ「予算」の 10% に相当します。",
  "5df385fcd8c87a01": "<strong>エッジルーティング</strong>",
  "7d8e9aaca6c71596": "すべてのユーザーの近くにサーバーを展開できるとは限りません。",
  "a10554bad3ffbd04": "世界中のユーザーすべてに対して 15ms RTT を達成するには、少なくとも 40 のグローバルデータセンターにデプロイする必要があります。それは大きなデブオプスの仕事です。しかも GPU を必要とするワークロードを実行していたり、そもそもグローバルに展開されていないサービスに依存している場合は、不可能かもしれません。",
  "7f3feda071246fa7": "光速をごまかすことはできません。<sup>[26]</sup> しかし、経路の変動性や輻輳を避けることはできます。",
  "767cd103ca4a4e9d": "[26] 古代のネットワークエンジニアの知恵 – 編者注。",
  "94ca626ec974d163": "重要なのは、パブリックインターネット経路をできるだけ短く保つことです。ユーザーを近くのエッジサーバーに接続し、そこからプライベートルートを使用します。",
  "20378f27e1096b82": "このエッジルーティングは中央値のパケット RTT を低減します。英国 → 北カリフォルニアのプライベートバックボーン経由ルートの往復時間はおそらく約 100 ミリ秒です。100 ms（長距離プライベートルート） + 15 ms（パブリックインターネット上の最初のホップ） = 115 ms。このプライベートルートの中央値 RTT はパブリックルートの中央値 RTT より 25ms 優れています。",
  "b518263b216b82d4": "英国から AWS us-west-1 へのエッジルート。パブリックネットワーク上の最初のホップは依然として 15ms の RTT を持ちます。しかし、プライベートネットワーク経由で北カリフォルニアへの長距離ルートは 100ms の RTT を持ちます。合計 RTT の 115ms は、英国から us-west-1 へのパブリックルートより 25ms 速くなっています。また、パケット損失やジッタが少なく、変動もかなり小さくなります。",
  "17423c5b6b413599": "中央値 RTT の改善よりさらに重要なのは、配信の信頼性向上とジッタの低減です。<sup>[27]</sup> プライベートルートの P95 RTT はパブリックルートの P95 よりも大幅に低くなります。<sup>[28]</sup>",
  "9fe83eafb5097dfc": "これは、長距離のパブリックルート経由のリアルタイムメディア接続が、プライベートルートを使用する接続よりも測定上遅延が大きくなることを意味します。各オーディオパケットをできるだけ早く配信しようとしている一方で、パケットを順序どおり再生する必要があることを思い出してください。1 つの遅延したパケットがあると、ジッタバッファを拡張して他の受信済みパケットを遅延パケットが到着するまで保持する必要が生じます。（あるいは、到着が長すぎると判断して空白を高度な数学で埋めるか、あるいは破綻したオーディオサンプルで埋めることになります。）",
  "f1c83d981dc0fa1b": "[27] ジッタはパケットが経路を通過するのにかかる時間の変動性のことです。",
  "8f94890255f57143": "[28] P95 はある指標の 95 パーセンタイル測定値です。P50 は中央値（50 パーセンタイル）です。広義には、P50 を平均的なケース、P95 を「典型的な最悪ケース」に近い感覚を捉えるものと考えます。",
  "37caf82b581b2bd5": "ジッタバッファ — 大きなジッタバッファは音声および映像における知覚される遅延の増加に直結します。ジッタバッファをできるだけ小さく保つことは、優れたユーザー体験に大きく寄与します。",
  "3f42f0fc978e6277": "優れた WebRTC インフラ提供者はエッジルーティングを提供します。どこにサーバークラスターを持っているかを示し、プライベートルートのパフォーマンスを示すメトリクスを提供できるはずです。",
  "f982ad0ce5a5854c": "4.7. ターン検出",
  "6dbe8edd518d576f": "<em>ターン検出</em> は、ユーザーが話し終えて LLM の応答を期待しているかどうかを判定することを意味します。",
  "aebff780ffc54837": "学術文献では、この問題のさまざまな側面が <em>フレーズ検出、音声セグメンテーション、エンドポインティング</em> と呼ばれています。（この問題について学術文献が存在するという事実は、これは自明ではない問題であることを示す手がかりです。）",
  "e84629fbac66e542": "私たち（人間）は誰かと話すときに毎回ターン検出を行います。しかし、いつも正しく行うわけではありません！<sup>[29]</sup>",
  "1086918cb7736ac0": "したがって、ターン検出は難しい問題であり、完全な解決策は存在しません。ここでは一般的に使われているさまざまなアプローチについて説明します。",
  "ec32a5fbd8bf2be0": "[29] 特に視覚的手がかりがない音声通話ではそうです。",
  "9ef574982042722b": "4.7.1 音声活動検出（VAD）",
  "8a44b03685695665": "現在、音声AI エージェントのターン検出で最も一般的な方法は、長いポーズ（無音）がユーザーの発話終了を意味すると仮定することです。",
  "b4dab091f90a5405": "音声AI エージェントのパイプラインは、小さく専門化された音声活動検出モデルを用いてポーズを識別します。VAD モデルは音声セグメントを「発話」または「非発話」に分類するように訓練されています。（これは音量レベルだけに基づいてポーズを識別しようとするよりもはるかに堅牢です。）",
  "4a229cbf36ed5946": "VAD は音声AI 接続のクライアント側またはサーバー側のいずれでも実行できます。クライアント側で大幅な音声処理を行う必要がある場合は、VAD をクライアントで実行してそれを支援する必要があるでしょう。たとえば、組み込みデバイスでウェイクワードを識別し、フレーズの先頭でウェイクワードを検出した場合にのみ音声をネットワーク越しに送信するような場合です。<em>Hey, Siri …</em>",
  "7ea202bae5f70d77": "一般的には、VAD を音声AI エージェントの処理ループの一部として実行する方が少し簡単です。電話経由で接続するユーザーがいる場合、VAD を実行できるクライアントがないため、サーバーで実行する必要があります。",
  "61675d6599e80f9f": "音声AIで最も頻繁に使用される VAD モデルは <a href=\"https://github.com/snakers4/silero-vad\" target=\"_blank\">Silero VAD</a> です。このオープンソースモデルは CPU 上で効率的に動作し、複数言語をサポートし、8kHz と 16kHz の両方の音声で良好に機能し、ウェブブラウザでの使用向けに wasm パッケージとしても利用可能です。リアルタイムのモノラル音声ストリーム上で Silero を実行しても、通常は典型的な仮想マシン CPU コアの 1/8 未満の負荷で済みます。",
  "f63101ba48e92dad": "ターン検出アルゴリズムにはいくつかの設定パラメータがあります：",
  "b208663fe456af62": "ターン終了とみなすために必要なポーズの長さ。",
  "d1ac515c2fa40e10": "発話開始イベントをトリガーするために必要な発話セグメントの長さ。",
  "bb3bf5b6416fd4c7": "各音声セグメントを発話と分類するための信頼度レベル。",
  "426966c77a96401b": "発話セグメントの最小音量。",
  "d4a908003b6f9d60": "ここでは音声認識の直前に実行されるように設定された音声活動検出処理ステップ",
  "87c53f49cb37c32a": "これらのパラメータを調整することで、特定のユースケースに対するターン検出の挙動を大幅に改善できます。",
  "3ad738a0f99676a6": "4.7.2 プッシュトゥトーク",
  "130307d4e987efc8": "ポーズに基づくターン検出の明白な問題は、人が一時的にポーズを取っていても話し終えていないことがある点です。",
  "d20923aec07152c0": "個々の話し方のスタイルは異なります。会話の種類によっては人はより多くポーズを取ります。",
  "b17d3c937acf6718": "長いポーズ間隔を設定すると会話がぎこちなくなり、非常に悪いユーザー体験になります。しかし短いポーズ間隔だと、音声エージェントが頻繁にユーザーの発話を遮ってしまい、これもまた悪いユーザー体験になります。",
  "5af6952df71891ae": "ポーズベースのターン検出の最も一般的な代替はプッシュトゥトークです。プッシュトゥトークとは、ユーザーが話し始めるときにボタンを押すか押し続け、話し終えたら再度ボタンを押すか放すことを要求する方式です。（昔ながらのトランシーバーの動作を思い浮かべてください。）",
  "91f01dd977c0ec50": "プッシュトゥトークではターン検出は明確ですが、ユーザー体験は単に話す場合とは異なります。",
  "b289aafe4668c27c": "電話を使った音声AIエージェントではプッシュトゥトークは実現できません。",
  "c0d41dad1ac3f302": "4.7.3 エンドポイントマーカー",
  "2e1a66b309133d0c": "特定の語をターンの終了マーカーとして使用することもできます。（CB 無線でトラッカーが \"over\" と言うのを思い浮かべてください。）",
  "6711f5b17a09a7e2": "特定のエンドポイントマーカーを識別する最も簡単な方法は、各文字起こし断片に対して正規表現マッチを実行することです。しかし、小さな言語モデルを使用してエンドポイントの単語やフレーズを検出することもできます。",
  "9bffe2917bf7031a": "明示的なエンドポイントマーカーを使用する音声AIアプリケーションはあまり一般的ではありません。ユーザーはこれらのアプリケーションに話しかける方法を学ぶ必要があります。しかし、このアプローチは特化したユースケースでは非常によく機能することがあります。",
  "73405029c3bfaee4": "たとえば、昨年見た素晴らしいデモでは、ある人が副業として自分用に作ったライティングアシスタントがありました。彼らはターンの終端を示したりモードを切り替えたりするために、さまざまなコマンドフレーズを使用していました。",
  "be21343871f4f4c9": "4.7.4 コンテキストに対応したターン検出（セマンティック VAD とスマートターン）",
  "6aa2015f56714519": "人間がターン検出を行うとき、次のようなさまざまな手がかりを使います：",
  "fb38cb409c64339b": "\"えっと\" のようなフィラー語を、発話が続く可能性が高いものとして識別すること。",
  "880e7106a4b295b1": "文法構造。",
  "34748197a9e0e678": "電話番号の桁数のように特定のパターンを知っていること。",
  "7e2f8738abc34ee2": "ポーズ前に語を引き延ばすなどの抑揚や発音パターン。",
  "99f36cf29fc132ef": "ディープラーニングモデルはパターン識別に非常に優れています。LLM は潜在的な文法知識を豊富に持ち、プロンプトによってフレーズのエンドポイント検出を行わせることができます。より小さく専門化された分類モデルは、言語、抑揚、発音パターンで訓練することができます。",
  "ef2bb3dbcf4c19b3": "音声AIエージェントが商業的にますます重要になるにつれて、コンテキストに対応した音声AIのターン検出の新しいモデルが登場すると予想されます。",
  "058f44951dc811cd": "主に二つのアプローチがあります：",
  "edf569d63cffd060": "リアルタイムで動作できる小さなターン検出モデルを訓練する。このモデルを VAD モデルと組み合わせて、または代替として使用します。ターン検出モデルはテキスト上でパターンマッチするように訓練できます。テキストモードのターン検出モデルは文字起こしの後にパイプライン内でインラインで動作し、効果的にするには特定の文字起こしモデルの出力で訓練する必要があります。あるいは、ターン検出モデルをネイティブに音声上で動作するように訓練することもでき、これにより言語レベルのパターンだけでなく抑揚、発話のペーシング、発音パターンを考慮した分類が可能になります。ネイティブ音声のターン検出モデルは文字起こし情報を必要としないため、文字起こしと並列して実行でき、パフォーマンスを改善できます。",
  "e56e4c00d8b31694": "大規模 LLM と few shot プロンプトを使ってターン検出を行う。LLM は通常インラインで使用するには遅すぎてパイプラインをブロックしてしまいます。この問題を回避するために、パイプラインを分割してターン検出と「グリーディ」な会話推論を並列で行うことができます。",
  "435f4515688629ed": "Pipecat パイプラインの <a href=\"https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/22d-natural-conversation-gemini-audio.py\" target=\"_blank\">コンテキスト対応ターン検出用コード</a> は Gemini 2.0 Flash ネイティブオーディオ入力を使用しています。ターン検出とグリーディな会話推論は並列で動作します。ターン検出推論がフレーズのエンドポイントを検出するまで出力はゲートされます。",
  "1a5623e38c87513f": "ターン検出における最近の動向：",
  "8beb088766686a18": "3 月に OpenAI は Realtime API 向けの新しいコンテキスト対応ターン検出機能をリリースしました。彼らはこの機能を、より単純な <em>サーバー VAD</em>（ポーズベースのターン検出）と対比して <em>セマンティック VAD</em> と呼んでいます。ドキュメントは <a href=\"https://platform.openai.com/docs/guides/realtime-vad#semantic-vad\" target=\"_blank\">こちら</a> にあります。",
  "174700bbdb3befd4": "<a href=\"https://www.tavus.io\" target=\"_blank\">Tavus</a> はトランスフォーマーベースのネイティブ音声ターン検出モデルを開発し、現在はリアルタイム会話ビデオ API の一部となっています。Tavus チームは問題領域とモデルの動作に関する非常に良い <a href=\"https://www.tavus.io/post/sparrow-0-advancing-conversational-responsiveness-in-video-agents-with-transformer-based-turn-taking\" target=\"_blank\">技術的概要</a> を公開しています。",
  "572ffe422e32cd88": "<a href=\"https://github.com/pipecat-ai/smart-turn\" target=\"_blank\">Smart Turn</a> オープンソースモデルは、Pipecat コミュニティによって構築・維持されている最先端のネイティブ音声ターン検出モデルです。すべての訓練データ、訓練コード、推論コード、およびモデルウェイトがオープンソースで公開されています。<sup>[30]</sup>",
  "0055143e5338e3d7": "[30] <a href=\"https://github.com/pipecat-ai/smart-turn\" target=\"_blank\">Pipecat オープンソース smart turn 検出モデル</a>",
  "0598f03a73138f48": "4.8. 中断処理",
  "b2290519f588014c": "<em>中断処理</em>とは、ユーザーが音声AIエージェントを中断できるようにすることを指します。中断は会話の通常の一部であるため、中断を適切に扱うことが重要です。",
  "2225fc92794ce340": "中断処理を実装するには、パイプラインのすべての部分がキャンセル可能である必要があります。また、クライアント上でオーディオ再生を非常に迅速に停止できる必要があります。",
  "0dc1b6ab5751d886": "一般に、使用しているフレームワークは中断がトリガーされたときにすべての処理を停止することを処理してくれます。<strong>しかし、リアルタイムより速い速度で生のオーディオフレームを送信するAPIを直接使用している場合は、再生を手動で停止し、オーディオバッファをフラッシュする必要があります。</strong>",
  "7cb306762ca76bd3": "4.8.1 誤検知による中断を避ける",
  "a9c3499c4d1ac3c2": "意図しない中断の原因となるいくつかの要素は注意に値します。",
  "2de4f88bd32766e6": "音声として分類される一時的なノイズ。優れたVADモデルは「ノイズ」と音声をうまく分離します。しかし、発話の始めに現れる種々の短く鋭い音は、発話の初期段階で中程度の音声確信度が付与されることがあります。咳やキーボードのクリックはこのカテゴリに入ります。VAD の開始セグメント長と確信度レベルを調整することで、この種の中断を最小限に抑えることができます。トレードオフは、開始セグメント長を長くし、確度の閾値を上げると、本来検出したい非常に短いフレーズを完全な発話として検出できなくなる可能性があることです。<sup>[31]</sup>",
  "ad2ebf297052b90d": "エコーキャンセレーションの失敗。エコーキャンセレーションアルゴリズムは完全ではありません。無音から音声再生への移行は特に難しい問題です。多くの音声エージェントのテストを行っていると、ボットが話し始めた直後に自分自身を中断するのを聞いたことがあるでしょう。原因は、エコーキャンセレーションが初期の音声をわずかにマイクにフィードバックさせてしまうことです。最小VAD開始セグメント長はこの問題を回避するのに役立ちます。また、音量の急激な遷移を避けるために音量レベルに対して指数平滑化<sup>[32]</sup>を適用することも有効です。",
  "2d0f972b8f3019b9": "バックグラウンドスピーチ。VADモデルはユーザーの発話と背景の発話を区別しません。背景の発話が音量閾値より大きいと、背景の発話が中断を引き起こします。スピーカー分離のためのオーディオ処理ステップは、背景スピーチによる誤検知中断を減らすことができます。上記の<a href=\"#server-side-noise\">サーバー側ノイズ処理とスピーカー分離</a>の節の議論を参照してください。",
  "fe0345322c6b8046": "4.8.2 中断後に正確なコンテキストを維持する",
  "f5256ffcab994708": "LLMはリアルタイムより速く出力を生成するため、中断が発生したときにはユーザーに送信するためにLLMの出力がキューに入っていることがよくあります。",
  "0c0c551065b7662c": "通常、会話のコンテキストはユーザーが実際に聞いた内容と一致させたい（パイプラインがリアルタイムより速く生成した内容ではなく）ことが多いです。",
  "cbdb085c1862d8fb": "おそらく会話のコンテキストをテキストとして保存しているでしょう。<sup>[33]</sup>",
  "a020a00a300c8eda": "したがって、ユーザーが実際に<em>聞いた</em>テキストが何であるかを特定する方法が必要です！",
  "208eb835633730d2": "最上級のSpeech-to-textサービスは単語レベルのタイムスタンプデータを出力します。これらの単語レベルのタイムスタンプを使用して、ユーザーが聞いたオーディオに一致するアシスタントメッセージのテキストをバッファして組み立てます。単語レベルのタイムスタンプに関する議論は上記の<a href=\"#text-to-speech\">テキスト読み上げ</a>の節を参照してください。Pipecatはこれを自動的に処理します。",
  "6e1855cc89c166df": "[31] Pipecatの標準パイプライン構成は、VADと文字起こしイベントを組み合わせて、誤検知中断と見逃しの両方を回避しようとします。",
  "4bc720ac22ad1e99": "[32] <a href=\"https://dub.sh/voice-agents-030\" target=\"_blank\">Pipecat VAD入力オーディオ指数平滑化コード</a>",
  "74154c7c061a186f": "[33] 標準のコンテキスト構造は、OpenAIによって開発されたユーザー/アシスタントのメッセージリスト形式です。",
  "8bf0fdd8e1c6b412": "4.9. 会話コンテキストの管理",
  "9e6f46e0e75ac5c0": "LLMはステートレスです。つまり、対話型の会話では、各応答を生成するたびに、これまでのすべてのユーザーとエージェントのメッセージやその他の構成要素をLLMに再度渡す必要があります。",
  "b024aef730f0636d": "各ターンで会話履歴全体をLLMに送信すること。",
  "7f0319dfcc510988": "各推論操作（各会話ターン）について、LLMに送信できるものは次のとおりです：",
  "f83a6ca776ccb71c": "システム指示",
  "f5f8903fca4355cb": "会話メッセージ",
  "463e8393230ede96": "LLMが使用するためのツール（Function Calling）",
  "92d97be5b3372a01": "構成パラメータ（例：temperature）",
  "aa480ab5cdf4f5f6": "4.9.1 LLM APIによる違い",
  "82120415c9e7cc09": "この一般的な設計は、今日の主要なLLMすべてに共通しています。",
  "f7d54af0f438b549": "しかし、各プロバイダーのAPIには違いがあります。OpenAI、Google、Anthropicはそれぞれメッセージ形式、ツール/関数定義の構造、システム指示の指定方法に違いがあります。",
  "56bcc3aa29e3cb0a": "サードパーティのAPIゲートウェイやソフトウェアライブラリがAPI呼び出しをOpenAIの形式に変換することがあります。これは有用です。なぜなら異なるLLM間を切り替えられることは便利だからです。しかし、これらのサービスは常に違いを適切に抽象化できるわけではありません。新機能や各API固有の機能は常にサポートされるとは限りません。（そして時には変換レイヤーにバグがある場合もあります。）",
  "e92147746aacb321": "抽象化するか否かは、AIエンジニアリングのこの比較的初期の時代には依然として答えがありません。<sup>[34]</sup>",
  "b29b0e4cc29e1e21": "例えばPipecatは、コンテキストメッセージとツール定義の両方についてOpenAI形式へのメッセージの変換を行います。しかしこれを行うかどうか、またどのように行うかは大いにコミュニティで議論された主題でした！<sup>[35]</sup>",
  "44407bac3280c0ed": "[34] 自分へのメモ: Claudeに良いハムレットのジョークを考えてもらうよう頼むこと – 編集者より。",
  "32d3fd7c2f96bb2e": "[35] こうしたトピックに興味があるなら、ぜひ<a href=\"https://discord.gg/pipecat\" target=\"_blank\">Pipecat Discord</a>に参加して、そこでの議論に参加してください。",
  "61d29242dcfb1d86": "4.9.2 ターン間でのコンテキスト修正",
  "2cd824bd3cebe808": "対話型のコンテキストを管理する必要があることは、音声AIエージェントの開発の複雑さを増します。一方で、コンテキストを遡及的に修正することは有用です。各会話ターンごとに、LLMに送信する内容を正確に決定できます。",
  "c83f35c984679ddc": "LLMは必ずしも完全な会話コンテキストを必要としません。コンテキストを短縮または要約することで、レイテンシーやコストを削減し、音声AIエージェントの信頼性を高めることができます。このトピックの詳細は下の<a href=\"#scripting\">スクリプティングと指示の遵守</a>の節を参照してください。",
  "546748eca7fb860b": "4.10. Function Calling",
  "b1fd7dd81f3eafde": "本番環境の音声AIエージェントはLLMのFunction Callingに大きく依存しています。",
  "c4a067a1edbb5cd8": "Function Callingは以下の用途で使用されます：",
  "9ab735017fcda2f6": "情報取得を用いた検索強化生成（RAG）のための情報取得。",
  "b7d7823189e668df": "既存のバックエンドシステムやAPIとのやり取り。",
  "3ff80d287bf4f3d3": "電話技術スタックとの統合 — 転送、待ち行列、DTMFトーンの送信。",
  "73a2dd6a2d9eeb76": "スクリプトの実行遵守 – ワークフローの状態遷移を実装するFunction Calling。",
  "c3cd5bcc1f4ded6e": "4.10.1 音声AIにおける Function Callingの信頼性",
  "ff365a3598096494": "音声AIエージェントがますます複雑なユースケースに展開されるにつれて、Function Callingの信頼性はますます重要になっています。",
  "2bfc5fa105cd1463": "最先端のLLMはFunction Callingが着実に向上していますが、音声AIのユースケースはLLMのFunction Calling能力を限界まで引き伸ばす傾向があります。",
  "1b6aa36fb432ef2e": "音声AIエージェントは以下の傾向があります：",
  "824300398c0ea751": "対話型の会話で関数を使用する。対話型の会話では、各ターンでユーザーとアシスタントのメッセージが追加されるにつれてプロンプトがますます複雑になります。このプロンプトの複雑化はLLMのFunction Calling能力を劣化させます。",
  "2d38bb439f760227": "複数の関数を定義する。音声AIワークフローでは、関数が5つ以上必要になることが一般的です。",
  "0e69256b5a8eb892": "セッション中に関数を複数回呼び出します。",
  "eadad07b4ad66693": "私たちは主要なAIモデルのリリースを厳密にテストし、これらのモデルを訓練している人々と頻繁に話をしています。上記のすべての属性は、現世代のLLMを訓練するために使用されたデータに対していくらか範囲外であることは明らかです。",
  "b2546084aade8189": "これは、現世代のLLMは一般的なFunction Callingベンチマークで良好な結果を出していても、音声AIのユースケースでは苦戦することを意味します。モデルごと、同一モデルの異なる更新版ごとに、Function Callingの得意不得意が異なり、状況に応じて異なる種類のFunction Callingに対する性能も異なります。",
  "da36b5af9f2fbf2d": "<strong>音声AIエージェントを構築している場合、アプリのFunction Calling性能をテストするために独自の評価（eval）を開発することが重要です。下の<a href=\"#evals\">Voice AI Evals</a>セクションを参照してください。</strong>",
  "5d5ed018eceb6128": "4.10.2 Function Callingのレイテンシ",
  "521128a10920e0f5": "Function Callingは4つの理由でレイテンシを追加します — 場合によっては大きなレイテンシになります：",
  "c781b3b5cb72cefa": "LLMがFunction Callingが必要だと判断すると、Function Calling要求メッセージを出力します。あなたのコードはその特定の要求された関数に対して必要な処理を行い、その後、同じコンテキストにFunction Callingの結果メッセージを追加して再度推論を呼び出します。したがって、関数が呼び出されるたびに、推論呼び出しが1回ではなく2回必要になります。",
  "aa30b8b74ef632c3": "Function Calling要求はストリーミングできません。Function Callingを実行する前に、完全なFunction Calling要求メッセージが必要です。",
  "d73b1bc735315a88": "プロンプトに関数定義を追加するとレイテンシが増加する可能性があります。これはやや曖昧な点で、プロンプトに関数定義を追加したことによる追加レイテンシを測定するためのレイテンシ指向の評価（eval）を開発するのが良いでしょう。しかし、少なくとも一部のAPIでは、関数（ツール）使用が有効な場合、関数が実際に呼び出されているかどうかにかかわらず中央値のTTFT（初回トークン到着時間）が高くなることは明らかです。",
  "8a2b26bbcab53ab3": "あなたの関数自体が遅い可能性があります！レガシーなバックエンドシステムと連携している場合、関数が返るのに時間がかかることがあります。",
  "6aacc1b2a51485c2": "ユーザーが話し終えたときには比較的迅速な音声フィードバックを提供する必要があります。Function Callingが返るのに時間がかかる可能性があると分かっている場合は、何が起きているかをユーザーに伝えて待つよう促す音声を出力することを検討してください。",
  "59d28c3a2c535340": "Function Callingを含む推論のTTFT。LLMのTTFTは450msでスループットは毎秒100トークンとする。Function Calling要求のチャンクが100トークンであれば、Function Calling要求を出力するのに1秒かかります。次に関数を実行し再度推論を行います。今回は出力をストリームできるため、450ms後に使用可能な最初のトークンが得られます。完全な推論のTTFTは1450msです（関数自体の実行時間は含みません）。",
  "b0798dc15b470db7": "次のいずれかを行うことができます：",
  "941bfe88769ae964": "Function Callingを実行する前に必ずメッセージを出力する。「Xを実行しますので少々お待ちください…」",
  "7dbb5d70bbdc48bd": "ウォッチドッグタイマーを設定し、Function Callingループがタイマー発火前に完了していない場合のみメッセージを出力する。「まだ処理中です。もう少しだけお待ちください…」",
  "b23fb4e567bc1de6": "もちろん両方行うこともできます。長時間実行されるFunction Calling中にバックグラウンドミュージックを再生することも可能です。<sup>[36]</sup>",
  "cf0561e2efa2210a": "[36] ただし、Jeopardyのテーマ曲はやめてください。",
  "090f140c5f9f228c": "4.10.3 中断の処理",
  "c9a6792c84b32e03": "LLMはFunction Calling要求メッセージとFunction Calling応答メッセージが対になって現れることを期待して訓練されています。",
  "1da19765a4a9a836": "これは次のことを意味します：",
  "5f3a9812818d88e7": "すべてのFunction Callingが完了するまで、speech-to-speechへの推論ループを停止する必要があります。<a href=\"#async-function-calls\">非同期Function Calling</a>に関する注意事項は下を参照してください。",
  "e45c87d5c16aec97": "Function Callingが中断されて二度と完了しない場合、何らかのことを示すFunction Calling応答メッセージをコンテキストに入れる必要があります。",
  "4b1e57657bb82e3e": "<strong>ここでのルールは、LLMが関数を呼び出した場合、リクエスト/レスポンスのメッセージペアをコンテキストに入れる必要があるということです。</strong>",
  "f7c8e0348f692fc6": "未解決のFunction Calling要求メッセージをコンテキストに入れたままマルチターン会話を続けると、LLMが訓練された方法から逸脱したコンテキストを作成することになります。（一部のAPIではこれを許可しません。）",
  "0722929b33c8f499": "リクエスト/レスポンスのペアをまったくコンテキストに入れない場合、あなたはLLMに（in‑context learningを通じて）関数を呼び出さないよう教えていることになります。<sup>[37]</sup> これも結果は予測不能で、おそらく望ましくないでしょう。",
  "caeefc43a6257d4d": "[37] 論文「<a href=\"https://arxiv.org/abs/2005.14165\" target=\"_blank\">Language Models are Few-Shot Learners</a>」を参照してください。",
  "0b1ae2ea433828d3": "Pipecatは、Function Callingが開始されるたびにリクエスト/レスポンスのメッセージペアをコンテキストに挿入することで、これらのコンテキスト管理ルールの遵守を支援します。（もちろん、この挙動を上書きしてFunction Callingコンテキストメッセージを直接管理することもできます。）",
  "7a51d724668a063d": "実行完了（run-to-completion）と中断可能（interruptible）の2つの異なる方法で構成されたFunction Callingについて、パターンは次のようになります。",
  "467039feae021b6b": "初期コンテキストメッセージ。Function Calling要求メッセージとFunction Calling応答のプレースホルダー。",
  "edd790e020998b01": "Function Callingが完了したときのコンテキスト。",
  "c57551a8d5df7a37": "プレースホルダーにより、Function Callingが実行されている間に会話を続けることができ、LLMを「混乱」させることを避けられます。",
  "c31e3ca8602f3a54": "Function Callingが<strong>中断可能</strong>として構成されている場合、Function Calling中にユーザーが発話するとキャンセルされます。",
  "e76a93ac03e0ebe0": "4.10.4 ストリーミングモードとFunction Callingのコンテンツチャンク",
  "3d63be55a4bf4113": "音声AIエージェントの実装では、ほとんどの場合、会話の推論呼び出しをストリーミングモードで実行します。これは初期の数個のコンテンツチャンクをできるだけ早く取得するためで、speech-to-speechへの応答レイテンシにとって重要です。",
  "970806c58b02c1f0": "ただし、ストリーミングモードとFunction Callingの組み合わせは扱いにくいです。ストリーミングはFunction Callingチャンクには役立ちません。LLMの完全なFunction Calling要求メッセージを組み立てるまで関数を呼び出すことはできません。<sup>[38]</sup>",
  "0f22cfc6a51d0e21": "[38] AIフレームワークを使用している場合、フレームワークがこの複雑さを隠してくれている可能性があります。",
  "4e2b126e32e681df": "推論プロバイダがAPIを進化させる際のフィードバックとして：Function Callingチャンクを原子性を持って提供し、ストリームされたコンテンツチャンクから分離するモードを提供してください。これにより、LLMプロバイダAPIを使用するコードの複雑さが大幅に軽減されます。",
  "abb3906425a327f5": "4.10.5 Function Callingをどのように、どこで実行するか",
  "a8d8f1710fb222b7": "LLMがFunction Calling要求を出力したとき、あなたは何をしますか？ここに一般的に使われるパターンを示します：",
  "2025dc0b9834b2ad": "要求された関数と同じ名前の関数を自分のコード内で直接実行する。これはほとんどすべてのLLM Function Callingドキュメントの例で見られる方法です。",
  "6507f045410402ec": "引数とコンテキストに基づいて要求を操作（オペレーション）にマップする。これは、LLMに対して汎用的なFunction Callingを行い、それをあなたのコード内で曖昧性を解消するように考えてください。このパターンの利点は、選択可能な関数の数を少なくすると一般にLLMがFunction Callingをより上手く行うことが多い点です。<sup>[39]</sup>",
  "bb4d60c9402d61f5": "Function Callingをクライアントにプロキシする。このパターンは（電話ではなく）アプリケーション文脈で利用可能です。例えば get_location() 関数を想像してください。ユーザーのデバイスの現在位置が必要であれば、そのデバイス上のジオロケーションAPIにフックする必要があります。",
  "3449881f080d63a1": "Function Callingをネットワークエンドポイントにプロキシする。これはエンタープライズ用途で特に有用なパターンです。内部APIと連携する一連の関数を定義し、これらのFunction CallingをHTTPリクエストとして実行する抽象化をコード内に作成します。",
  "6249aaaf5e325f3c": "[39] ここではFunction Callingを広義のカテゴリとして考えてください — 口語的ではなく形式的な意味での関数です。ルックアップテーブルから値を返すこともできます。SQLクエリを実行することもできます。",
  "c1032fa77e81a89c": "Function Callingパターン",
  "9e575138a4ef0839": "4.10.6 非同期Function Calling",
  "edfcede677a1670b": "場合によっては、Function Callingからすぐに戻りたくないことがあります。関数が完了するまでの時間が予測できない場合や、まったく完了しないかもしれない場合があります。あるいは、時間とともに情報を追加できる長時間実行プロセスを起動したい場合もあります。",
  "b903e5e5b4c26166": "例えば、ユーザーがツアー中に見かけるかもしれない事柄への関心を表現できるウォーキングツアーアプリを想像してください。「有名な作家が住んでいた場所があれば、特にそれについて聞きたいです。」この場合の良いアーキテクチャの一つは、ユーザーが特定の関心を表明するたびにLLMが関数を呼び出すことです。その関数はバックグラウンドプロセスを開始し、関心に関連するものが見つかるたびに情報をコンテキストに注入します。",
  "b1ddf13a4645e91a": "<strong>現在のところ、LLMのFunction Callingを使ってこれを直接行うことはできません。Function Callingの要求/応答メッセージはコンテキスト内で一緒に現れなければなりません。</strong>",
  "cee07f2f0dc6ad47": "したがって、次の形の関数を定義する代わりに：",
  "56e4e0ceeeb1be99": "<pre><code>register_interest_generator(interest: string) -&gt; Iterator[Message]</code></pre>",
  "7ba80113d59f3316": "次のようにする必要があります：",
  "2da0ade54baa3676": "<pre><code>create_interest_task_and_return_success_immediately\n  (interest: string, context_queue_callback: Callable[Message]) -&gt; \n    Literal[\"in_progress\", \"canceled\", \"success\", \"failure\"]</code></pre>",
  "a72dd63243a7cd18": "このトピックの詳細な議論については、以下の <a href=\"#async-inference-tasks\">Performing async inference tasks</a> セクションを参照してください。",
  "6a0e75d481bf915b": "LLM や API がマルチモーダルな会話ユースケースをよりよくサポートするように進化するにつれて、非同期関数やジェネレータとして機能する長時間実行される関数に関するアイデアを LLM 研究者が検討することを期待しています。",
  "77da04a86fff1b0d": "4.10.7 並列および複合Function Calling",
  "f770847fdab3016e": "<em>並列Function Calling</em> は、LLM が単一の推論レスポンス内で複数のFunction Callingを要求できることを意味します。<em>複合Function Calling</em> は、LLM が複数の関数を柔軟に順番に呼び出し、複雑な操作を実行するために関数を連鎖させることを意味します。",
  "742f2b4485f94aa8": "これらはエキサイティングな機能です！",
  "02a31003738c34e8": "しかし、それらは音声エージェントの動作の変動性を増加させます。つまり、並列および複合Function Callingが実際の会話で期待どおりに機能しているかをテストする評価とモニタリングを開発する必要があります。",
  "504df5b142ae6cbd": "並列Function Callingの処理はエージェントの実装をより複雑にします。特定の用途がない限り、多くの場合、並列Function Callingを無効にすることを推奨します。",
  "22034a393f79b13c": "複合Function Callingはうまく機能すると魔法のように感じられます。複合Function Callingの早期の興味深い例の一つは、Claude Sonnet 3.5 がファイル名とタイムスタンプに基づいてファイルからリソースをロードするために関数を連鎖させたのを見たことでした。",
  "f268e21909f53dac": "LLM は2つの関数 – <strong> list_files()</strong> と <strong>load_resource()</strong> – をどのように連鎖させて特定の指示に応答するかを自ら見つけ出します。これら二つの関数はツールリストに記述されています。しかし、この連鎖動作はプロンプトされているわけではありません。",
  "2b6cd07ae4d2ad0a": "複合Function Callingは最先端の LLM の比較的新しい機能です。性能は「でこぼこ」で、驚くほど良い一方で、苛立たしいほど一貫性に欠けます。",
  "8ace53562face84c": "4.11. マルチモダリティ",
  "9352c614f7a18690": "LLM は現在、テキストに加えて音声、画像、動画を消費・生成します。",
  "b0e1f1c772c44e14": "前述した <a href=\"#speech-to-speech\">speech-to-speech models</a> について話しました。これらは音声を入力として受け取り、音声を出力として生成できるモデルです。",
  "f00b9f4a385230f5": "最先端モデルのマルチモーダル能力は急速に進化しています。",
  "3d73db2849e1635b": "GPT-4o、Gemini Flash、Claude Sonnet はいずれも非常に優れた視覚能力を持ち、画像を入力として受け取ります。これらのモデルにおける視覚サポートは、画像の内容を説明したり、画像に表示されるテキストを書き起こししたりすることに重点を置いて始まりました。リリースごとに能力は拡張されます。物体のカウント、バウンディングボックスの特定、画像内のオブジェクト間の関係のより良い理解などは、より新しいリリースで利用可能な有用な能力です。",
  "e2f2850d15ce58e4": "Gemini Flash は動画入力での推論も可能で、映像トラックと音声トラックの両方を理解できます。<sup>[40]</sup>",
  "09dcc3d38658396a": "興味深い新しいクラスの音声対応アプリケーションは、画面を「見る」ことができ、ローカルマシンやウェブブラウザ上でタスクを実行するのを助けるアシスタントです。多くの人が音声駆動のウェブ閲覧のための足場を構築しています。",
  "31acb9575a74392a": "私たちが知っているいくつかのプログラマは、最近では入力する頻度と同じくらい話すことが多いです。音声入力を接続して Cursor や Windsurf を操作するのは比較的簡単です。<sup>[41]</sup> また、画面キャプチャを接続して AI プログラミングアシスタントが編集エディタ内のコード、構築中のウェブアプリの UI 状態、端末の Python スタックトレースなど、あなたが見ているものを正確に見るようにすることも可能です。この種の完全にマルチモーダルな AI プログラミングアシスタントは、この文書全体で述べてきた未来の断片のもう一つの姿のように感じられます。<sup>[42]</sup>",
  "37d437436243c2e9": "[40] GPT-4o と Claude の両方で、動画から個々のフレームを抽出し、そのフレームを画像としてコンテキストに埋め込むことで動画を処理できます。このアプローチには制約がありますが、いくつかの「動画」ユースケースではうまく機能します。",
  "08f80152168b804b": "[41] 深い AI 統合とツーリングを備えた人気の新しいプログラミングエディタが二つあります。",
  "2447f1f17496ba7c": "[42] OpenAI Dev Day 2024 Singapore での swyx の講演、 <a href=\"https://dub.sh/voice-agents-040\" target=\"_blank\">\"Engineering AI Agents\"</a> を参照してください。",
  "db2596a6b98c5b9c": "現在、最先端モデルはさまざまな組み合わせでマルチモダリティをサポートしています。",
  "c62d91091c319cac": "GPT-4o (gpt-4o-2024-08-06) はテキストと画像の入力を持ち、テキスト出力を行います。",
  "da8ca22a71704009": "gpt-4o-audio-preview はテキストと音声の入力を持ち、テキストと音声の出力を行います。（画像入力はなし）",
  "6152f546ff319ad6": "Gemini Flash はテキスト、音声、画像、動画の入力を持ちますが、出力はテキストのみです。",
  "f25a966bf0eae39e": "OpenAI の新しい speech-to-text と text-to-speech モデルは完全に操作可能で gpt-4o の基盤上に構築されていますが、テキストと音声の間の変換に特化しています：gpt-4o-transcribe、gpt-4o-mini-transcribe、gpt-4o-mini-tts。",
  "cd626d1f5aecd681": "マルチモーダルサポートは急速に進化しており、上記のリストはすぐに古くなると予想されます！",
  "cdf9b2c66ab5df3d": "音声AIにとって、マルチモダリティの最大の課題は、音声や画像が多くのトークンを使用することであり、トークンが増えるほどレイテンシが高くなることです。",
  "326374ce8d55feb9": "メディアの例",
  "462858bf26394926": "おおよそのトークン数",
  "bebd583112ae0b26": "音声をテキスト化した場合の1分間の音声",
  "d400092c9f7c654a": "音声としての1分間の音声",
  "eaba2fc8b501189b": "2,000",
  "c994af2028b5948e": "画像1枚",
  "1e472b39b105d349": "250",
  "1dfea8d893b01089": "動画1分",
  "b2ee3509c1fa4f97": "15,000",
  "331d9f818af925c6": "一部のアプリケーションでは、多数の画像を扱いながら会話的なレイテンシを達成することが大きなエンジニアリング上の課題です。会話的レイテンシを達成するには、コンテキストを小さく保つか、ベンダー固有のキャッシュ API に依存する必要があります。画像はコンテキストに多くのトークンを追加します。",
  "d3a65e2756d3d6b8": "常時稼働し、作業ループの一部としてあなたの画面を監視するパーソナルアシスタントエージェントを想像してみてください。例えば、「1時間前に読もうとしていたツイートがあったけど電話がかかってきて忘れてタブを閉じてしまった。そのツイートは何だった？」と尋ねたいかもしれません。",
  "ae5e0c10558a02f3": "<em>1時間前はほぼ100万トークンに相当します。</em> たとえモデルがコンテキストに100万トークンを収容できたとしても<sup>[43]</sup>、そのような多数のトークンで毎ターン対話型の会話を行うコストとレイテンシは現実的ではありません。",
  "d653605ac5e68f20": "[43] Hello, Gemini!",
  "b2cfaad1ea17110c": "ビデオをテキストとして要約し、要約だけをコンテキストに保持することができます。埋め込みを計算して RAG のような検索を行うこともできます。LLM は特徴要約やFunction Callingを使用して複雑な RAG クエリをトリガーすることに非常に長けています。しかし、これらのアプローチはいずれもエンジニアリング的に複雑です。",
  "9b101028a4c3fa2d": "最終的に最も効果のある手段はコンテキストキャッシングです。すべての最先端 API プロバイダはキャッシングのサポートを提供しています。現時点のキャッシング機能はいずれも音声AIユースケースにとって完全ではありません。今年はマルチモーダルでマルチターンの会話ユースケースが最先端モデルの訓練者の注目を集めるにつれて、キャッシュ API は改善されると予想しています。",
  "a10d25cfffa332a7": "5. 複数の AI モデルの使用",
  "a54c588f55cf4aca": "今日の実運用の音声AIエージェントは複数のディープラーニングモデルを組み合わせて使用しています。<sup>[44]</sup>",
  "7d75cdb04583913c": "前述のとおり、典型的な音声AIの処理ループは、ユーザーの音声を speech-to-text モデルで文字起こしし、文字起こししたテキストを LLM に渡して応答を生成し、最後に text-to-speech ステップを実行してエージェントの音声出力を生成します。",
  "c9a77f091b02d090": "さらに、多くの実運用の音声AIエージェントは今日、複雑で多様な方法で複数のモデルを使用しています。",
  "51e819b454aaf402": "[44] OpenAI と Google のベータ版音声-to-音声 API でさえ、ターン検出を実装するために専用の VAD とノイズ抑圧モデルを使用しています。",
  "636ee175b88675dc": "5.1. 複数のファインチューニング済みモデルの使用",
  "c2565164a3c1b7ca": "ほとんどの音声AI エージェントは、OpenAI や Google（時には Anthropic や Meta）による SOTA<sup>[45]</sup> モデルを使用します。最新で最も性能の高いモデルを使用することは重要です。なぜなら音声AI のワークフローは一般にモデル能力の <em>jagged frontier</em><sup>[46]</sup> の端にあり、ぎりぎりの領域で動作しているからです。音声エージェントは複雑な指示に従い、人間と自然な形で自由度の高い会話に参加し、関数やツールを確実に使える必要があります。",
  "38edaac9a5f1023c": "[45] SOTA — state of the art — は AI エンジニアリングで広く使われる用語で、おおまかに「主要なAI研究所からの最新の大型モデル」を意味します。",
  "1e4f9347a37a53de": "しかし、特定のユースケースでは、会話の異なる状態ごとにモデルをファインチューニングするのが合理的な場合があります。ファインチューニングされたモデルは、特定のタスクに対しては同等以上の性能を保ちながら、より小さく、より高速で、より安価に動作させることができます。",
  "15622adf042a182d": "非常に大きな産業用部品カタログから部品注文を支援するエージェントを想像してください。このタスクでは、プラスチック材料、金属材料、締結具、配管、電気、保護具など、各カテゴリに焦点を当てた複数の異なるモデルを訓練するかもしれません。",
  "445fa033a502caf7": "[46] ウォートン教授の <a href=\"https://x.com/emollick\" target=\"_blank\">Ethan Mollick</a> は、SOTA モデル能力の複雑な境界領域を表すために「jagged frontier」という用語を造りました — 場合によっては驚くほど優れていることもあれば、苛立たしいほど劣ることもあります。",
  "c72e72432b1d6d1e": "ファインチューニングされたモデルは一般に2つの重要なカテゴリで「学習」できます:",
  "d6d238b78955c082": "組み込み知識 — モデルは事実を学習できます。",
  "fccbd42e9f195df1": "応答パターン — モデルはデータを変換する手法を学習できます。これには会話のパターンやフローの学習も含まれます。",
  "db02ea6d4266bf73": "仮に産業用サプライ会社が膨大な生データを持ってるとします:",
  "15444f18530d3d07": "各部品のデータシート、メーカー推奨、価格、内部データを含む非常に大きなナレッジベース。",
  "55e044cf65f41b73": "テキストチャットログ、電子メールのやり取り、サポート担当者との電話会話の文字起こし。",
  "5deed5e74190f27a": "特定の会話トピックに対してファインチューニング済みモデルを使用する例。さまざまなアーキテクチャ上のアプローチが考えられます。この例では、各会話ターンの開始時に、ルータとなるLLMが全文脈を分類します。",
  "fc8bd0474e005ac4": "この生データをファインチューニング用データセットに変換する作業は大きな仕事ですが、実行可能です。必要なデータクリーニング、データセット作成、モデル訓練、モデル評価はいずれもよく理解された問題です。",
  "8091f07422b29974": "<strong>重要なポイント: いきなりファインチューニングに飛びつかないで — まずはプロンプトエンジニアリングから始めてください。</strong>",
  "99c4c3c4e5360fca": "プロンプティングはほとんどの場合、ファインチューニングと同じタスク結果を達成できます。ファインチューニングの利点は、より小さなモデルを使えることにあり、それは推論が速くコストが低くなることに繋がります。<sup>[47]</sup>",
  "992812724b1d73e9": "プロンプティングを使えば、ファインチューニングよりもはるかに簡単に始められ、はるかに速く反復できます。<sup>[48]</sup>",
  "bdf21103eb0bcc97": "会話の異なる状態に異なるモデルを使う方法を初期探索する際、プロンプトを小さな「モデル」と考えてください。大きく文脈に特化したプロンプトを作ることで LLM に何をすべきか教えています。",
  "eacbc5248374e75c": "組み込み知識については、ナレッジベースから情報を引き出し、検索結果を効果的なプロンプトに組み立てる検索機能を実装してください。これについては、下の <a href=\"#rag-memory\">RAG とメモリ</a> セクションを参照してください。",
  "7c96e851ed04f909": "応答パターンについては、モデルに異なる質問への応答の例を埋め込みます。場合によっては数例で十分なこともあります。場合によっては、多数 — 100 を超える例が必要になることもあります。",
  "c7a4351214fc13b5": "[47] プロンプティングとファインチューニングの詳細を深く掘り下げたい場合は、以下の2つの古典的な論文を参照してください: Language Models Are Few-shot Learners と A Comprehensive Survey of Few-shot Learning.",
  "f169bcff67014888": "[48] 古典的なエンジニアリングアドバイスに従ってください: まず動くようにし、次に速くし、最後に安くする。プロンプトエンジニアリングからファインチューニングに移行するのは、プロセスの <em>速く</em> する段階の中盤あたりまで考えないでください。（そこに至ることがあるなら）",
  "d7c2c1fc390c0737": "5.2. 非同期推論タスクの実行",
  "0183962ddb50f02d": "時には LLM を実行に比較的長い時間がかかるタスクに使いたいことがあります。コアの会話ループでは応答時間を約1秒（またはそれ以下）にすることを目指していることを忘れないでください。タスクが数秒以上かかる場合、選択肢は2つあります:",
  "a0697f721f2f3d31": "ユーザーに何が起きているかを伝え、待つように促す。<em>「お調べしますので少々お待ちください…」</em>",
  "7150e69053b89c84": "より長いタスクを非同期で実行し、その間会話をバックグラウンドで続けられるようにする。<em>「調べておきますね。それをしている間に他に何か質問はありますか？」</em>",
  "0d45753cbe9fa5d5": "非同期で推論タスクを実行する場合、その特定タスクに別の LLM を使うことを選ぶかもしれません（コアの会話ループから切り離されているため）。音声応答に許容される速度より遅い LLM を使ったり、特定タスク向けにファインチューニングした LLM を使うことがあります。",
  "8ec53e99a752be31": "非同期推論タスクのいくつかの例:",
  "7834f1991904c3fe": "コンテンツの「ガードレール」を実装する。（<a href=\"#content-guardrails\">コンテンツガードレール</a> セクション参照。）",
  "9af244a0a2af3b1b": "画像を作成すること。",
  "6bf4efe6169419b2": "サンドボックスで実行するコードを生成すること。",
  "27f76e39ec792ca7": "推論モデルの最近の驚異的な進歩<sup>[49]</sup> により、LLM に頼めることの範囲が広がりました。ただし、これらのモデルは有用な出力を出す前に思考トークンの生成にかなりの時間を費やすことが多いため、音声AI 会話ループには直接使えません。とはいえ、マルチモデルの音声AI アーキテクチャの非同期パートとして推論モデルを使うのは有効に機能することがあります。",
  "a75316ebd9ee8371": "[49] 推論モデルの例としては DeepSeek R1、Gemini Flash 2.0 Thinking、OpenAI o3-mini などがあります。",
  "202fbbc68a850bd1": "非同期推論は通常 LLM のFunction Callingでトリガーされます。単純なアプローチは2つの関数を定義することです。",
  "84285b0880e3682a": "<code>perform_async_inference()</code> — これは長時間実行される推論タスクを実行すべきと LLM が判断したときに LLM によって呼び出されます。これを複数定義することもできます。注意点は、非同期タスクを開始してから直ちに基本的な <em>タスク開始に成功した</em> 応答を返す必要があることです。これはFunction Callingのリクエストとレスポンスのメッセージがコンテキスト内で正しい順序になるようにするためです。<sup>[50]</sup>",
  "d97d59b05ac9cdd3": "<code>queue_async_context_insertion()</code> — これは非同期推論が終了したときにオーケストレーション層によって呼び出されます。ここでの難点は、結果をコンテキストにどのように挿入するかがやろうとしていることと、使用している LLM/API が許可するものに依存することです。一つの方法は、進行中の会話ターンの終わり（すべてのFunction Callingの完了を含む）まで待ち、非同期推論結果を特別に作成したユーザーメッセージに入れ、それからもう一度会話ターンを実行することです。",
  "b1a2b9da2d7540b3": "[50] <a href=\"#async-function-calls\">非同期Function Calling</a> を参照してください。",
  "4698ebefa85b6d32": "5.3. コンテンツガードレール",
  "4e775c19cadb5d5e": "音声AIエージェントにはいくつかの脆弱性があり、特定のユースケースで重大な問題を引き起こします。",
  "b027ad47a6d84701": "プロンプトインジェクション",
  "08cbd764e551fe9d": "幻覚（ハルシネーション）",
  "84e17673e93d7410": "知識の陳腐化",
  "186238f1296ba457": "不適切または危険なコンテンツの生成",
  "f12a29f01203bb37": "<em>コンテンツガードレール</em> はこれらを検出しようとするコードの総称であり、LLM を偶発的または悪意のあるプロンプトインジェクションから保護し、ユーザーに送信される前に不適切な LLM 出力を検出します。",
  "e17dc4f7e7c627dc": "ガードレールに特定のモデル（またはモデル群）を使うことにはいくつかの利点があります:",
  "ae8cea0e53a09509": "小型モデルはガードレールや安全性監視に適していることが多いです。問題のあるコンテンツを識別することは比較的専門的なタスクであり得ます。（実際、プロンプトインジェクションの回避については、必ずしも普通のプロンプトで応答できるモデルが望ましいわけではありません。）",
  "e3152b454d93a4ac": "ガードレール作業に別のモデルを使う利点は、それがメインモデルとまったく同じ弱点を持たない可能性があることです。少なくとも理論上は。",
  "19c68831d1e24227": "いくつかのオープンソースのエージェントフレームワークにはガードレールコンポーネントがあります。",
  "01550c947557f350": "llama-guard は Meta の <a href=\"https://github.com/facebookresearch/llama-stack\" target=\"_blank\">llama-stack</a> の一部です",
  "c2ea21328866c922": "<a href=\"https://github.com/NVIDIA/NeMo-Guardrails\" target=\"_blank\">NeMO Guardrails</a> は、LLMベースの会話アプリケーションにプログラム可能なガードレールを追加するためのオープンソースツールキットです",
  "997b4008d247e39b": "NVIDIAのNeMo Guardrailsフレームワークがサポートする5種類のガードレール。図はNeMo Guardrailsのドキュメントより。",
  "8de8df933b203320": "これら両方のフレームワークはテキストチャットを念頭に設計されており、音声AI向けではありません。しかし、どちらも有用なアイデアと抽象化を持っており、ガードレール、安全性、コンテンツモデレーションを考えるなら参考に値します。",
  "b8f5fd706b597431": "<strong>重要なのは、LLMはここ1年でこれらの問題を回避する能力が非常に向上している点です。</strong>",
  "7ae454346880f395": "最新の大手AI研究所のモデルでは、ハルシネーションはもはや重大な問題ではありません。現在、定期的に見られるハルシネーションは主に2種類です。",
  "f702b60ac75e9a6a": "LLMが関数を呼び出すふりをするが、実際には呼び出していないケース。これはプロンプトで修正可能です。プロンプトでこの現象が起きないことを確認するには、適切な評価（evals）が必要です。評価でFunction Callingのハルシネーションが見られたら、再発しなくなるまでプロンプトを反復してください。（対話型の会話はLLMのFunction Calling能力に<em>大きな</em>負荷をかけるため、評価は実際の会話を模倣する必要があります。）",
  "a5b589ac012619d7": "ウェブ検索を期待しているときにLLMがハルシネートするケース。組み込みの検索グラウンディングはLLM APIの比較的新しい機能です。LLMが検索を実行するかどうかはまだやや予測しにくいです。検索を行わない場合、重みの中に埋め込まれた（古い）知識やハルシネーションで応答することがあります。Function Callingのハルシネーションとは異なり、プロンプトだけで簡単に修正できるものではありません。しかし、検索が実際に行われたかどうかは容易に確認できます。したがって、アプリケーションのUIにその情報を表示したり、音声会話に注入したりできます。アプリがウェブ検索に依存する場合、これを行うのは良い考えです。問題をユーザーに理解・対処させる形に移すことになりますが、ユーザーから「検索した」「検索しなかった」の区別を隠すよりは良いです。肯定的に言えば、検索が機能すると、古くなった知識の問題を大幅に解消できます。",
  "2099953bfeee0e72": "主要なラボの全てのAPIには非常に優れたコンテンツ安全フィルターが備わっています。",
  "4402e9ee6b1e07c6": "プロンプトインジェクションの回避も1年前よりかなり改善されていますが、LLMが新たな機能を獲得するにつれて潜在的なプロンプトインジェクション攻撃の対象領域は拡大します。例えば、画像内テキストからのプロンプトインジェクションが今問題になっています。",
  "f894ba7b2f82b8dd": "非常に一般的な指針として：今日の音声AIユースケースでは、通常のユーザー行動によって偶発的にプロンプトインジェクションが発生することは稀です。しかし、ユーザー入力だけでシステム命令を覆すようにLLMの挙動を操ることは確実に可能です。これを念頭にエージェントをテストすることが重要です。<strong>特に、バックエンドシステムにアクセスする任意の関数へ渡すLLM生成の入力は必ずサニタイズし、クロスチェックすることが非常に重要です。</strong>",
  "885520a737bab1a0": "5.4. 単一推論アクションの実行",
  "4e5d5d55bba91af0": "AIエンジニアにとって、LLMを活用する方法を学ぶのは継続的なプロセスです。そのプロセスの一部は、これらの新しいツールに対する思考の転換です。LLMを最初に使い始めたとき、多くの人は「言語モデルは何を独自にできるのか？」という視点で考えていました。しかし、LLMは汎用ツールです。非常に広範囲の情報処理タスクに優れています。",
  "45d5981c09990683": "音声エージェントの文脈では、常にLLM推論を実行するコードパスを用意しています。LLMをコアの会話ループにのみ使う必要はありません。",
  "652744a2ab28954b": "たとえば：",
  "0b98cbb6d89b9361": "正規表現に頼ろうとするたびに、おそらくプロンプトを書けば代替できることが多いです。",
  "e8d1cb0c40474289": "LLM出力の後処理はしばしば有用です。たとえば、UI表示用のテキストと会話用の音声という2つのフォーマットで出力を生成したい場合があります。会話用LLMに整形されたマークダウンを生成させ、次に音声生成向けに短く再フォーマットするように再度LLMにプロンプトする、ということができます。<sup>[51]</sup>",
  "9c6b500413aaf2c2": "再帰は強力です。<sup>[52]</sup> LLMにリストを生成させ、それぞれの要素に対してLLMを再度呼び出して操作を行う、といったことが可能です。",
  "1d61645919281f88": "マルチターン会話を要約したくなることがよくあります。LLMは素晴らしく、操作可能な要約器です。これについては以下の<a href=\"#scripting\">スクリプティングと命令追従</a>のセクションで詳述します。",
  "d47b5812dddd19f3": "[51] LLM出力の後処理に関しては、上記の<a href=\"#content-guardrails\">コンテンツガードレール</a>セクションも参照してください。",
  "ad635e2a0841e622": "[52] 我々はプログラマーなので、当然… — 編集部より。",
  "a85c65f61769a43a": "これらの新たに出現する実装パターンの多くは、言語モデルが自身または別の言語モデルをツールとして使うように見えます。",
  "e04a534b4118e562": "これは非常に強力なアイデアであり、2025年には多くの人がこれに取り組むことが予想されます。エージェントフレームワークはライブラリレベルのAPIにこれを組み込むサポートを構築できます。モデルはFunction Callingやコード実行を行うように訓練されるのと大まかに類似した方法で、再帰的に推論を行うよう訓練され得ます。",
  "d853a2a75ab7e8fb": "5.5. 自己改善システムに向けて",
  "969f73a3c7de67ab": "SOTAの「モデル」にAPI経由でアクセスする際、我々がアクセスしているのは単一のアーティファクトではありません。APIの背後にあるシステムは、ルーティング、マルチステージ処理、分散システム技術を駆使して、高速に、柔軟に、信頼性高く、そして非常に大規模に推論を行います。これらのシステムは常に調整されます。重みが更新されます。低レベルの推論実装は常により効率的になっています。システムアーキテクチャも進化します。",
  "ebc57521fbaecfb2": "大手ラボは、ユーザーがAPIをどのように使うかと、推論や他の機能をどのように実装するかの間のフィードバックループを継続的に短縮しています。",
  "2e364192bf6a8d1b": "これらのますます速くなるフィードバックループは、近年の驚くべきマクロレベルのAI進展の大きな要因です。",
  "09c11ddbe0af0d72": "これに触発されて、我々のエージェントレベルのコードにおけるマイクロレベルのフィードバックループはどのように見えるでしょうか？会話中にエージェントの性能を改善する特定の足場（スキャフォールド）を組み込めるでしょうか？",
  "24f1f6170c17f4eb": "エージェントがユーザーの発話が終わる前にどれくらい割り込むかを監視し、VADのタイムアウトなどのパラメータを動的に調整する。",
  "555403256947d2f2": "ユーザーがエージェントに割り込む頻度を監視し、LLMの応答長を動的に調整する。",
  "ed66bd65fb472110": "ユーザーが会話を理解するのに苦労していることを示すパターンを探し出す — 例えばユーザーがその言語を母国語としないスピーカーである可能性がある。会話スタイルを調整するか、言語切替を提案する。",
  "ae61ae1081539376": "他に思いつくアイデアはありますか？",
  "01053840c22f593d": "マルチターンセッション中のユーザーフィードバックに基づいて挙動を調整するLLMの例（コンテキスト内学習）",
  "818ffb8e559509fa": "6. スクリプトと命令追従",
  "9b2deb7610ad1dc5": "1年前、自然な人間の待ち時間でのオープンエンドな会話が可能な音声エージェントを構築できるだけでも興奮するものでした。",
  "35dd0c4b10ccf0cc": "現在では、音声AIエージェントを実世界の複雑なタスクに展開しています。今日のユースケースでは、セッション中にLLMに特定の目標に集中させる指示が必要です。しばしば、LLMに特定の順序でサブタスクを実行させる必要があります。",
  "8356d80271891f3b": "たとえば、医療の患者受付ワークフローでは、エージェントに次のことを行ってほしいです：",
  "2b6a9e2548ce6c98": "何よりも先に患者の本人確認を行うことを確認する。",
  "9b014fc632a1ed57": "患者が現在服用している薬を必ず尋ねること。",
  "ea1dd0b5b944fbab": "患者が薬Xを服用していると言った場合、特定のフォローアップ質問をすること。",
  "18ba966a5a02e9eb": "などなど…",
  "4b87c50f2ae99c0f": "我々は、ステップごとのワークフローを作成することを <em>スクリプティング</em> と呼びます。過去1年の音声AI開発で得た教訓の1つは、<em>プロンプトエンジニアリング</em>だけでスクリプトの信頼性を達成するのは難しい、ということです。",
  "fbc936cc12593afa": "単一のプロンプトに詰め込める詳細には限界があります。関連して、マルチターン会話でコンテキストが大きくなると、LLMが追跡すべき情報が増え、命令追従の精度は低下します。",
  "03ed33bbdc07cb6c": "多くの音声AI開発者は、複雑なワークフロー構築に状態機械アプローチへ移行しています。LLMを導くために長く詳細なシステム命令を書く代わりに、一連の状態を定義できます。各状態は：",
  "95b894a400fa6224": "システム命令とツールのリスト。",
  "14d64c32425a9c79": "会話コンテキスト。",
  "de848298b133142d": "現在の状態から別の状態への一つ以上の移動手段。",
  "b26f029c14c59c9e": "各状態遷移は以下を行う機会です：",
  "53181b1e5764599a": "システム命令とツールのリストを更新する。",
  "41a52d9aa1681db4": "コンテキストを要約または修正する。<sup>[53]</sup>",
  "ed54c244e418b504": "[53] 通常は、コンテキスト要約を実行するためにLLM推論呼び出しを行います。:-)",
  "63bb2cd2e83fadc5": "状態機械アプローチは、より短く焦点を絞ったシステム指示、ツール一覧、およびコンテキストがLLMの指示遵守を大幅に改善するため、うまく機能します。",
  "19a79d31c9d65884": "課題は、一方でLLMの自由で自然な会話能力を活用することと、他方でLLMがやるべき重要な部分を確実に実行するようにすることの間で、適切なバランスを見つけることです。",
  "d9765c4a0a584903": "<a href=\"https://github.com/pipecat-ai/pipecat-flows\" target=\"_blank\">Pipecat Flows</a> は、開発者がワークフローステートマシンを作成するのを支援する、Pipecatの上に構築されたライブラリです。",
  "16d207b801bedbb6": "ステート図はJSONとして表現され、Pipecatプロセスにロードできます。これらのJSONステート図を作成するためのグラフィカルエディタがあります。",
  "dee9ffe71e2c56c8": "Pipecat Flows グラフィカルエディタ",
  "eadabf3d4d5a2143": "Pipecat Flows とステートマシンは現在多くの開発者に採用されています。しかし、複雑なワークフローの抽象化を構築するための他の興味深い考え方もあります。",
  "392a020cf7ac0ca5": "AI研究開発の活発な分野の一つはマルチエージェントシステムです。ワークフローを通過すべき一連の状態として考えるのではなく、マルチエージェントシステムとして考えることもできます。",
  "47ed74f3ad814ed3": "Pipecatのコアとなるアーキテクチャ要素の一つは並列パイプラインです。並列パイプラインを使うと、処理グラフを通るデータを分割して二度（あるいはそれ以上）処理できます。データをブロックしたりフィルタリングしたりできます。多数の並列パイプラインを定義できます。ワークフローをゲート付きで調整された並列パイプラインの集合として考えることもできます。",
  "5c2e999028851415": "音声AIツールの急速な進化は刺激的であり、こうした新しい種類のプログラムを構築するための最良の方法を見つける段階がまだ初期であることを強調しています。",
  "670c5d56236079be": "7. 音声AIの評価（Evals）",
  "659913a04c2ac5d5": "非常に重要なツールの一種が eval、すなわち評価です。",
  "737c1e73ffe3f9cf": "<em>Eval</em> は、システムの能力を評価し品質を判断するツールやプロセスを指す機械学習用語です。",
  "157489e6b3c5dee2": "7.1. 音声AIの評価はソフトウェアのユニットテストとは異なる",
  "d45d362e6089f612": "従来のソフトウェアエンジニアリング出身であれば、テストを（主に）決定論的な作業として考える習慣があるでしょう。",
  "5109f2bc86d9c7a4": "音声AIは従来のソフトウェア工学とは異なるテストを必要とします。音声AIの出力は非決定論的です。音声AIのテスト入力は複雑で分岐するマルチターンの会話です。",
  "69d1f83e10c3613b": "特定の入力が特定の出力を生成することをテストする代わりに <code>(f(x) = y)</code>、確率的な評価を実行する必要があります — ある種のイベントがどのくらいの頻度で発生するかを見るために多数のテストランを行います<sup>[54]</sup>。あるテストではケースのクラスを10回中8回正しく処理できれば受容可能で、他のテストでは精度が9.99/10である必要があります。",
  "03be49ad2af48c15": "[54] ユーザー要求が満たされた、エージェントがユーザーの発話を遮った、エージェントが話題から逸れた、など",
  "0ac350e12d061e8a": "単一の入力だけがあるのではなく、多数の入力、すなわちすべてのユーザー応答があることになります。これにより、ユーザー行動をシミュレートしようとしない限り、音声AIアプリケーションのテストが非常に困難になります。",
  "359afe091e54ba5a": "最後に、音声AIのテストは二値的な結果を持たず、伝統的なユニットテストのように明確な✅や❌を返すことは稀です。代わりに、結果をレビューしてトレードオフを判断する必要があります。",
  "d8141e9febf6355f": "7.2. 失敗モード",
  "3adf18c0358aef9d": "音声AIアプリには特有の形態や失敗モードがあり、評価の設計と実行に影響を与えます。レイテンシは重要です（テキストモードでは許容されるレイテンシが音声システムでは失敗になります）。マルチモデル構成です。（例えば、性能の低下はLLMの挙動ではなくTTSの不安定さが原因である可能性があります）。",
  "ff1be3579ed9500a": "今日しばしば課題となる分野には次のようなものがあります：",
  "e704eeb46062fa39": "最初の発話までの時間やエージェント応答までのレイテンシ",
  "e96c27806f28dc10": "文字起こしの誤り",
  "48b5bd0558f34c8c": "住所、メール、名前、電話番号の理解と発話",
  "5f1f15d3b63281c6": "割り込み（途中遮断）",
  "65265ba2f81dff8c": "7.3. 評価戦略の策定",
  "674a18afa7eb7647": "基本的な評価プロセスは、プロンプトとテストケースを記載したスプレッドシートほど簡単なものでも構いません。",
  "3af1bc7ae6a11cac": "典型的なアプローチの一つは、新しいモデルをテストしたりシステムの主要部分を変更したりするたびに各プロンプトを実行し、LLMを使って応答が期待されるパラメータの定義内に収まるかを判定することです。",
  "0d5f29e848f455e6": "基本的な評価を持つことは何も持たないよりずっと良いですが、評価に投資し、非常に良い評価を持つことは、規模を運用し始めると重要になります。",
  "a1ea253c13d04649": "音声AIユースケース向けの高度なツールを提供する評価プラットフォームは出始めたばかりです。音声（オーディオ）評価の特定ワークフローとツールに早期投資しているプラットフォームとしては、<a href=\"https://coval.dev\" target=\"_blank\">Coval</a>、<a href=\"https://freeplay.ai/\" target=\"_blank\">FreePlay</a>、および <a href=\"https://wandb.ai/site/weave/\" target=\"_blank\">Weights &amp; Biases Weave</a> の三つがあります。いずれもPipecatとの統合が良好です。",
  "6cfa151101770a96": "Coval evals プラットフォームUIのスクリーンショット",
  "8354003e61bca8f6": "これらのプラットフォームは次の点で役立ちます：",
  "5aac8720cf646f5a": "プロンプトの反復改善（プロンプトイテレーション）。",
  "17718d716765b036": "オーディオ、ワークフロー、Function Calling、会話の意味的評価に関する既製の指標。",
  "e74526cc7907d2e3": "問題領域のヒルクライミング（例えば、エージェントを割り込み対応でより良くする）。",
  "a32ab10b9e59d7a5": "回帰テスト（ある問題領域を修正したときに、以前に解決された他の領域での回帰を導入していないことを確認する）。",
  "4ea593ee3a2cdce7": "開発者による変更やユーザーコホート間での、時間経過に伴う性能変化の追跡。",
  "e2d4fd6bd0917358": "8. 電話インフラストラクチャとの統合",
  "241ebd091367f802": "<strong>今日最も急成長している音声AIサービスの多くは電話通話に関係しています。</strong>現在、大量のAI音声エージェントが電話に応答し、発信を行っています。",
  "f3e410e7fb88323e": "この一部は従来のコールセンターで起きています。コールセンターは主に音声AIを「ディフレクション率（自動化で処理できる通話の割合）」を改善する技術と見なしています。これにより音声AI導入のROIが明確になります。LLMの1分あたりコストが人間エージェントの1分あたりコストより安ければ、導入判断は容易です<sup>[55]</sup>",
  "5c048481090333be": "[55] もちろん、AIエージェントの性能が良好であることが前提です。今日の多様なカスタマーサポートユースケースの多くでは、その条件が満たされています。",
  "3e4dcaefea1352cd": "ただし、単純なROI計算を超えて採用を加速するいくつかの興味深い動きが起きています。",
  "0b133af3e5c57ff8": "音声AIエージェントは人間のスタッフとは異なる方法でスケーラブルです。一度音声AIを導入すると、ピーク時の待ち時間が短くなります。（その結果として顧客満足度スコアが上がります。）",
  "d440507d831c4c84": "また、LLMにより良いツールを与えることで、LLMが人間エージェントより良い仕事をすることがあります。多くのカスタマーサポート状況では、人間のエージェントは複数のレガシーなバックエンドシステムを扱わなければなりません。適時に情報を見つけることが課題になります。同じ状況に音声AIを導入する際には、これらのレガシーシステムへのAPIレベルのアクセスを構築する必要があります。新しいLLM＋APIレイヤーが音声AIへの技術移行を可能にしています。",
  "64c01feace0d292a": "生成AIが今後数年でコールセンターの景観を完全に再構築することは明らかです。",
  "f8562e83928098d2": "コールセンター以外でも、音声AIは小規模ビジネスが電話応対を行う方法や、電話を情報探索と調整の手段として使う方法を変えています。我々は毎日、あらゆる業界向けの専門的なAI電話ソリューションを構築するスタートアップと話をしています。",
  "c442bc42bb66a89b": "この分野の人々はよく冗談めかして、やがて人間は電話をかけたり受けたりしなくなるだろうと言います。電話はすべてAI対AIになるだろうと。私たちが見るトレンドラインからすると、その言葉には一定の真実があります！",
  "a510b067fd24beeb": "音声AIのための電話技術に関心があるなら、いくつかの頭字語や共通の概念を知っておくとよいです。",
  "3b39552e454d5850": "PSTNは<em>public, switched, telephone network</em>（公衆交換電話網）です。実際の電話番号を持つ実際の電話とやり取りする必要がある場合、PSTNプラットフォームと連携する必要があります。Twilioはほとんどの開発者が聞いたことのあるPSTNプラットフォームです。",
  "54305def970cec61": "SIP は IP 電話に使用される特定のプロトコルですが、一般的な意味ではシステム間の電話インターコネクトを指すために SIP と呼ばれます。たとえばコールセンターの技術スタックと連携する場合は SIP を使用する必要があります。SIP プロバイダと契約するか、独自の SIP サーバーをホストすることができます。",
  "cec3bb1d52454d40": "DTMF トーンは電話メニューを操作するためのキー押下音です。音声エージェントは実世界の電話システムと対話するために DTMF トーンを送信できる必要があります。LLM は電話ツリーの処理がかなり得意です。少しプロンプトエンジニアリングを行い、DTMF トーンを送信する関数を定義すれば対応できます。",
  "ebb3b96d6e83895d": "音声エージェントはしばしば通話転送を実行する必要があります。単純な転送では、音声AIが関数を呼び出して通話転送をトリガーすることでセッションを終了します。<sup>[56]</sup> <em>ウォームトランスファー</em> は、エージェント同士が通話者を第二のエージェントに接続する前に互いに会話する形での引き継ぎです。音声AIエージェントは人間と同様にウォームトランスファーを行うことができます。音声エージェントは最初に人間の通話者と話し、次に通話者を保留にして新しい人間エージェントと会話を行い、その後通話者をその人間エージェントにつなぎます。",
  "04852615a136193e": "[56] 実際の転送操作は、テレフォニー プラットフォームへの API 呼び出しか、SIP REFER アクションである可能性があります。",
  "0c2730aa01a91a54": "9. RAG とメモリ",
  "9f39dfbf57b5de7c": "音声AIエージェントはしばしば外部システムから情報にアクセスします。たとえば、次のようなことが必要になるかもしれません：",
  "ea9d7b1380deb9ed": "ユーザーに関する情報を LLM のシステム指示に組み込む。",
  "d9131f8fd7657078": "過去の会話履歴を取得する。",
  "3427218c49b1d389": "ナレッジベースで情報を参照する。",
  "b6172a56db32ef12": "ウェブ検索を行う。",
  "9523207f8e1505b2": "リアルタイムの在庫や注文状況の確認を行う。",
  "78dd2b99ae0efb5a": "これらはすべて RAG（Retrieval Augmented Generation：検索強化生成）のカテゴリに入ります。RAG は情報検索と LLM プロンプトを組み合わせることを指す一般的な AI エンジニアリング用語です。",
  "e073f76cb386f35b": "音声エージェントにおける「最も単純な RAG」は、会話開始前にユーザー情報を参照し、その情報を LLM のシステム指示に統合することです。",
  "68baee8e27212433": "単純な RAG – セッション開始時にルックアップを実行する",
  "9697f194ad2ef678": "RAG は奥が深く、急速に変化している分野です。<sup>[57]</sup> 手法は、上記のような基本的なルックアップと文字列挿入を行う比較的単純なアプローチから、埋め込みとベクトルデータベースを使って非常に大量の半構造化データを整理するシステムまで多岐に渡ります。",
  "5de27c895725da29": "[57] うーん。最近の生成 AI の他の分野と同じように聞こえますね。",
  "e523abb4370d3849": "多くの場合、80/20 のアプローチで大きな効果が得られます。既存のナレッジベースがあるなら、すでにある API を使いましょう。検索した結果を会話コンテキストに注入するいくつかのフォーマットをテストするための簡単な評価を作成します。本番にデプロイして、実際のユーザーでどの程度うまく機能するかを監視します。",
  "a074e5bb6943fc12": "セッション中の RAG。情報参照が必要なときに LLM が呼び出せる関数を定義します。この例では、システムが応答に数秒かかることをユーザーに伝えるために、あらかじめ設定した発話フレーズも出力しています。",
  "929c58d86b4476a8": "いつものように、音声AIではレイテンシが非音声システムより大きな課題になります。LLM がFunction Callingリクエストを行うと追加の推論呼び出しがレイテンシに加わります。外部システムでの情報参照も遅くなる可能性があります。作業中であることを知らせるために、RAG ルックアップを実行する前に簡単な音声出力をトリガーするのが有用なことが多いです。",
  "a816875ccff4ab39": "より広く見れば、セッション間のメモリは有用な機能です。あなたが話したことをすべて覚えておく必要がある音声AI個人アシスタントを想像してください。一般的には次のような二つのアプローチがあります：",
  "5ce12f0eb968b3ff": "各会話を永続ストレージに保存する。会話をコンテキストに読み込むためのいくつかのアプローチをテストする。たとえば、パーソナルアシスタントのユースケースにうまく機能する戦略は次のようなものです：エージェント起動時に最新の会話を常に完全に読み込み、最新 N 件の会話の要約を読み込み、必要に応じて LLM が古い会話を動的に読み込めるようにルックアップ関数を定義する。",
  "c9352a66f4cdd86e": "会話履歴の各メッセージをメッセージグラフに関するメタデータとともにデータベースに個別に保存する。すべてのメッセージをインデックス化する（おそらくセマンティック埋め込みを使用）。これにより、分岐する会話履歴を動的に構築できます。アプリが画像入力（LLM Vison）を多用する場合はこれを検討したいかもしれません。画像はコンテキスト空間を多く消費します！<sup>[58]</sup> このアプローチは分岐型 UI を構築することも可能にし、AIアプリ設計者がこれから探求し始めている方向の一つです。",
  "170b649f997775cd": "[58] 「<a href=\"#multimodality\">マルチモーダリティ</a>」を参照してください。",
  "ed3267ade39feade": "10. ホスティングとスケーリング",
  "518956c908e6caa6": "音声AIアプリケーションには従来型のアプリコンポーネント（ウェブアプリのフロントエンド、API エンドポイント、その他のバックエンド要素）が含まれることが多いです。しかしエージェントプロセス自体は従来のアプリコンポーネントとは十分に異なるため、音声AIのデプロイとスケーリングには固有の課題があります。",
  "a966f5a474927065": "10.1 アーキテクチャ",
  "b5b9a70c6c54d0af": "音声AIエージェントの会話ループは通常長時間実行されるプロセスです（単一の応答生成が終了したら終了するリクエスト/レスポンス関数ではありません）。",
  "65e8a84974978917": "音声エージェントはリアルタイムでオーディオをストリームします。ストリーミングが滞るとオーディオのグリッチが生じます。（共有仮想マシンでの CPU スパイク、オーディオスレッドの実行を 10ms でもブロックするようなプログラムフローなど）",
  "7e8bd5fb0d4fad85": "音声エージェントは通常 WebSocket または WebRTC のいずれかの接続を必要とします。クラウドサービスのネットワークゲートウェイやルーティング製品は HTTP をサポートするほど WebSocket をうまくサポートしていないことが多いです。UDP をまったくサポートしていないこともあります。（WebRTC には UDP が必要です。）",
  "c1f94f382a7895c4": "これらすべての理由から、音声AIにサーバーレスフレームワーク（AWS Lambda や Google Cloud Run など）を使用するのは一般的に不可能です。",
  "92fda71914353da8": "現在のベストプラクティスは次のとおりです：",
  "3abee516659307a9": "プロトタイピング段階を突破したら、エンジニアリング時間を投資してエージェントをデプロイするための軽量ツールを作成し、Docker（または類似）コンテナをビルドするようにします。",
  "1d42e44e41ad950a": "コンテナを選択したコンピュートプラットフォームにプッシュします。シンプルなデプロイでは固定数の仮想マシンを稼働させ続けるだけで十分です。しかしある時点で、自動スケールや新しいバージョンの優雅なデプロイ、サービスディスカバリとフェイルオーバーの実装、その他大規模運用のためのDevOps要件を満たすためにプラットフォームのツールに接続したくなるでしょう。",
  "684817a03b381398": "Kubernetes は現在、コンテナ、デプロイ、およびスケーリングを管理するスタンダードです。Kubernetes は習得コストが高いですが、主要なクラウドプラットフォームのすべてでサポートされています。Kubernetes の周りには非常に大きなエコシステムがあります。",
  "152e47639ddf56b2": "ソフトウェア更新をデプロイする際には、既存の接続がセッション終了まで維持されるように長いドレイン時間を設定したいでしょう。これは Kubernetes ではそれほど難しくありませんが、詳細は k8s エンジンとバージョンによって異なります。",
  "ed9399a9b0ec41dc": "コールドスタートは音声AIエージェントにとって問題です。接続時間が重要だからです。アイドル状態のエージェントプールを維持することが長いコールドスタートを回避する最も簡単な方法です。ワークロードがローカルで大規模モデルを実行することを要求しない場合、比較的少ない労力で高速なコンテナコールドスタートを設計できます。<sup>[59]</sup>",
  "6f4d02ed42fedb91": "仮想マシンスペックとコンテナの詰め込み（packing）は、本番デプロイで人々をつまずかせることがよくあります。エージェントに必要なスペックは、使用するライブラリやエージェントプロセス内でどれだけ CPU 集約的な作業を行うかによって異なります。経験則としては、まず開発マシンでエージェントプロセスが消費する最大メモリの 2 倍の RAM を確保し、仮想マシンの CPU ごとにエージェントを 1 つ実行することから始めると良いでしょう。<sup>[60]</sup>",
  "51497a5ec6c254ab": "[59] 大規模モデルをローカルで実行している場合、コールドスタートに関するアドバイスは本ガイドの範囲外です。GPU やコンテナの最適化に精通していない場合、必要なツールを自分で開発する学習曲線をたどるよりも専門家を見つけることを検討したほうが良いでしょう（少なくとも十分な規模で運用してコストを平準化できるまで）。",
  "895329a09277eb07": "[60] コンテナランタイムがアイドルの CPU 上で新しいエージェントプロセスを起動していることを確認してください。これは常に k8s のデフォルトではありません。",
  "c8658ec0f8cfb7d5": "10.2 分あたりコストの計算",
  "b783a5f5d5b63db9": "音声AIのコストは、使用するモデル、API、およびホスティングインフラストラクチャによって大きく異なります。コストはユースケースにも依存します。たとえば上の <a href=\"#cost-comparison\">コスト比較</a> で述べたように、セッションが長くなるほど分あたりコストは一般的に高くなります。またテレフォニーは WebRTC トランスポートより高価です。",
  "5dbf0065be456d09": "コストは、OpenAIRealtime API のような音声対音声 API を使用する場合は分あたり $0.20 以上、ホスト型のバッテリーインクルード型エージェントプラットフォームで分あたり $0.10、かなり規模の大きいコスト最適化されたデプロイでは分あたり $0.02 まで幅があります。",
  "a88f336639b485ec": "時々見られる誤りの一つは、音声と LLM API のコストを計算する前にエージェントホスティング自体をコスト最適化してしまうことです。<strong>一般に、エージェントプロセス自体のクラウドランタイムコストは総分あたりコストの 1% 未満です。</strong> vCPU あたりのエージェント同時実行数を最適化するためにエンジニアリング作業を費やす価値はほとんどありません。",
  "9b65b1104a846067": "<a href=\"https://www.livetok.io/cost-calculator\">こちらはインタラクティブなコスト計算機</a>で、<a href=\"https://twitter.com/anarchyco\">Gustavo Garcia</a> によって開発されました。",
  "110490901150fbae": "インタラクティブなコスト計算機",
  "215231fa81f514ea": "あるいは、スプレッドシートが好みなら、<a href=\"https://docs.google.com/spreadsheets/d/1-B3nv7fhwEoFmDs-phm280XK9phTep0qfyLKRNsEwVE/edit?gid=0#gid=0\" target=\"_blank\">ここにあるスプレッドシート</a> をコピーして分あたりコスト計算の出発点として使うことができます。",
  "f42e483974d8008a": "音声AIエージェントの分あたりコストを計算するためのスプレッドシート",
  "b078b2e13a19235c": "スプレッドシートのスクリーンショットの数字は、Deepgram、GPT-4o、Cartesia を使用するセルフホスト型エージェントのものです。10 分セッションの場合、分あたりコストは約 2.5 セントです。文字起こしと LLM 推論がそれぞれコストの約 1/4、音声生成が約半分を占めます。ホスティングはコストの 1% 未満です。",
  "c83befd4f355cb5c": "もちろん、これはセルフホスティングの実際のコストを現実的に表したものではありません。自分ですべてのホスティングインフラを構築・維持する場合、エージェント自体に加えて多数のシステムや機能をセットアップ、スケール、保守する必要があります。",
  "cb536efbd18e97cc": "サービスディスカバリ",
  "49f71548cb6fb18a": "ロードバランシング",
  "d3ef01b4a9c99103": "ロギング",
  "1dc83f605edf0ae2": "モニタリング",
  "bec749e6fb9e5981": "帯域幅",
  "c2d0b31be6b4124f": "複数リージョン",
  "8f6fb4eb7f42c0e2": "セキュリティ",
  "ea5955206e916b3b": "コンプライアンスおよび規制機能（たとえばデータ居住性）",
  "94c116ee118a7299": "分析",
  "4c46466854cbb4df": "カスタマーサポート",
  "7be80d9c167bb5fb": "11. 2025年に来るもの",
  "287602ac80ed7de6": "AIエンジニアリングの成長に関連して、音声AIは2024年に大きく成長し、2025年もこの傾向が続くと予想されます。",
  "9163e62d67c141ae": "すべてのモデル作成者とサービスプロバイダによるさらなるレイテンシ最適化。長い間、多くのサービス実装者やほとんどの公開ベンチマークはスループットに焦点を当ててきましたが、音声AIではトークン毎秒よりも最初のトークン到達時間（time to first token）をはるかに重視します。",
  "3adce3c56c67277c": "すべての非テキストモダリティがモデルとAPIに完全統合する方向への進展。",
  "5ea01061519e1f6c": "テストおよび評価ツールにおける、より多くの音声特化機能。",
  "b3a9e64fb9c3e6ac": "リアルタイムのマルチモーダルユースケースのニーズをサポートするコンテキストキャッシングAPI。",
  "395794e8ed163888": "複数プロバイダによる新しい音声AIエージェントプラットフォーム。",
  "6d316e0be52722bf": "複数プロバイダによるスSpeech-to-speechモデルAPI。",
  "54bb9c73cc5cc34b": "文字起こし精度と音声生成品質を向上させるためにコンテキストを取り込めるコンテクスチュアルスピーチモデル。",
  "97b0983f07dbd050": "音声AI分野の4人の専門家による2025年の見解を聞きたい場合は、1月のサンフランシスコVoice AI Meetupのパネル記録の<a href=\"https://www.youtube.com/live/B6zTwHh-abw?t=3065s\" target=\"_blank\">54:05</a>に飛んでください。Karan Goel、Niamh Gavin、Shrestha Basu-Mallick、Swyxが来年に見られると予想する内容として、ユニバーサルメモリ、ハリウッドでのAI、モデルの模倣から理解への移行、そしてロボティクスに関する対立的な見解をそれぞれ述べています。",
  "70b1555b4af996dd": "楽しい一年になりそうです。",
  "350ad433c42fe8ce": "寄稿者",
  "689d7517abe60f2d": "責任著者",
  "07aed17b83ab9b1b": "Kwindla Hultman Kramer",
  "c786ef588b7384b4": "評価セクションの支援をしてくれたBrooke Hopkins、Llamaの性能とUltravoxに関する洞察を提供してくれたZach Koch、コンテクスチュアルスピーチモデルへの移行の重要性に関する注釈をくれたBrendan Iribeに感謝します。",
  "9ca4be1c11ea9888": "寄稿著者<sup>[61]</sup>",
  "ac1186c7823b9e5b": "aconchillo, markbackman, filipi87, Moishe, kwindla, kompfner, Vaibhav159, chadbailey59, jptaylor, vipyne, Allenmylath, TomTom101, adriancowham, imsakg, DominicStewart, marcus-daily, LewisWolfgang, mattieruth, golbin, adithyaxx, jamsea, vr000m, joachimchauvet, sahilsuman933, adnansiddiquei, sharvil, deshraj, balalofernandez, MaCaki, TheCodingLand, milo157, RJSkorski, nicougou, AngeloGiacco, kylegani, kunal-cai, lazeratops, EyrisCrafts, roey-priel, aashsach, jcbjoe, Dev-Khant, wg-daniel, cbrianhill, ankykong, nulyang, flixoflax, DANIIL0579, Antonyesk601, rahultayal22, lucasrothman, CarlKho-Minerva, 0xPatryk, pvilchez, pedro-a-n-moreira, RonakAgarwalVani, xtreme-sameer-vohra, shaiyon, soof-golan, yashn35, zboyles, balaji-atoa, eddieoz, mercuryyy, rahulunair, porcelaincode, weedge, wtlow003, zzz-heygen, adidoit, ArmanJR, Bnowako, chhao01, Regaddi, cyrilS-dev, DamienDeepgram, danthegoodman1, dleybz, ecdeng, gregschwartz, KevGTL, louisjoecodes, M1ngXU, mattmatters, MoofSoup, natestraub",
  "0072e6b934945d5b": "デザイン",
  "ad41c3d4cafd850d": "Sascha Mombartz",
  "30b503d581f13c47": "Akhil K G",
  "e4114752f5f9a54c": "[61] GitHubユーザー名、<a href=\"https://github.com/pipecat-ai/pipecat/graphs/contributors\" target=\"_blank\">github.com/pipecat-ai/pipecat/graphs/contributors</a>",
  "5d49f491b368e696": "この書籍はCC0ライセンスの下で利用可能です。著者は法が許す最大限の範囲で、自身の著作物に対する著作権および関連する権利を放棄しています。本著作物は自由に使用でき、帰属表示は不要です。",
  "422de5eaccfcf9f1": "<a href=\"https://github.com/pipecat-ai/voice-ai-primer-web\" target=\"_blank\">GitHub</a>でこのガイドの表示および貢献が可能です。",
  "a56e64974a86c2ec": "Voice AI& Voice Agents | 図解プライマー",
  "2b683a48eafce944": "2025年の音声AIに関する総合ガイド"
}
